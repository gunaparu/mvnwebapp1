import boto3
import json
import gzip
import time

S3_BUCKET_NAME = "your-cloudtrail-log-bucket"
DYNAMODB_TABLE_NAME = "IAMThreatLogs"

s3 = boto3.client("s3")
dynamodb = boto3.resource("dynamodb")
client = boto3.client("dynamodb")

# Function to check and create the table
def check_and_create_table():
    existing_tables = client.list_tables()["TableNames"]
    
    if DYNAMODB_TABLE_NAME not in existing_tables:
        print(f"Table {DYNAMODB_TABLE_NAME} not found. Creating...")
        client.create_table(
            TableName=DYNAMODB_TABLE_NAME,
            AttributeDefinitions=[{"AttributeName": "eventID", "AttributeType": "S"}],
            KeySchema=[{"AttributeName": "eventID", "KeyType": "HASH"}],
            BillingMode="PAY_PER_REQUEST"
        )

        # Wait until the table is active
        waiter = client.get_waiter("table_exists")
        waiter.wait(TableName=DYNAMODB_TABLE_NAME)
        print(f"Table {DYNAMODB_TABLE_NAME} created successfully!")

# Lambda function
def lambda_handler(event, context):
    check_and_create_table()  # Ensure table exists before inserting logs

    print("Received event:", json.dumps(event, indent=4))

    try:
        # Extract S3 object key
        if "Records" in event and len(event["Records"]) > 0 and "s3" in event["Records"][0]:
            bucket_name = event["Records"][0]["s3"]["bucket"]["name"]
            object_key = event["Records"][0]["s3"]["object"]["key"]
        else:
            bucket_name = S3_BUCKET_NAME
            object_key = "AWSLogs/123456789012/CloudTrail/us-east-1/2025/03/06/correct-log-file.json.gz"

        print(f"Fetching file: {object_key} from bucket: {bucket_name}")

        response = s3.get_object(Bucket=bucket_name, Key=object_key)
        log_data = gzip.decompress(response["Body"].read()).decode("utf-8")
        cloudtrail_events = json.loads(log_data)["Records"]

        table = dynamodb.Table(DYNAMODB_TABLE_NAME)
        for log in cloudtrail_events:
            log["eventID"] = log.get("eventID", str(time.time()))  # Ensure primary key exists
            table.put_item(Item=log)

        return {"status": "IAM logs stored in DynamoDB"}

    except Exception as e:
        print(f"Error processing event: {e}")
        return {"status": "Error processing event", "error": str(e)}

import boto3
import json

# AWS Clients
dynamodb = boto3.resource("dynamodb")
table = dynamodb.Table("IAMThreatLogs")
bedrock = boto3.client("bedrock-runtime")  # AWS Bedrock Runtime API

# Define Suspicious Actions
SUSPICIOUS_ACTIONS = [
    "AttachRolePolicy", "PassRole", "CreateUser", "CreateAccessKey", "DeleteUser"
]

# Lambda Function
def lambda_handler(event, context):
    response = table.scan(Limit=10)  # Get recent 10 logs
    logs = response["Items"]

    findings = []
    
    for log in logs:
        if log["eventName"] in SUSPICIOUS_ACTIONS:
            prompt = f"Analyze this IAM event for security risks:\n{json.dumps(log, indent=2)}"
            
            # Call AWS Bedrock (Replace model with actual Bedrock-supported model)
            bedrock_response = bedrock.invoke_model(
                modelId="anthropic.claude-v2",
                body=json.dumps({"prompt": prompt, "max_tokens_to_sample": 200})
            )
            
            result = json.loads(bedrock_response["body"].read().decode("utf-8"))
            risk_assessment = result.get("completion", "No analysis available")

            findings.append({
                "event": log["eventName"],
                "user": log["userIdentity"]["arn"],
                "risk_assessment": risk_assessment
            })
    
    return {"status": "Analysis Complete", "findings": findings}

import boto3
import json
import base64

# AWS Clients
dynamodb = boto3.resource("dynamodb")
table = dynamodb.Table("IAMThreatLogs")
bedrock = boto3.client("bedrock-runtime")  # AWS Bedrock Runtime API

# Define Suspicious Actions
SUSPICIOUS_ACTIONS = [
    "AttachRolePolicy", "PassRole", "CreateUser", "CreateAccessKey", "DeleteUser"
]

# Function to generate embeddings using Titan Embeddings
def get_text_embedding(text):
    payload = {
        "inputText": text
    }

    response = bedrock.invoke_model(
        modelId="amazon.titan-embed-text-v1",
        body=json.dumps(payload)
    )
    
    response_body = json.loads(response["body"].read().decode("utf-8"))
    return response_body["embedding"]

# Lambda Function
def lambda_handler(event, context):
    response = table.scan(Limit=10)  # Get recent 10 logs
    logs = response["Items"]

    findings = []
    
    for log in logs:
        if log["eventName"] in SUSPICIOUS_ACTIONS:
            event_text = json.dumps(log, indent=2)
            embedding = get_text_embedding(event_text)  # Convert log event to vector
            
            findings.append({
                "event": log["eventName"],
                "user": log["userIdentity"]["arn"],
                "embedding": embedding  # Store embedding for threat analysis
            })
    
    return {"status": "Analysis Complete", "findings": findings}
SUSPICIOUS_ACTIONS = [
    # ðŸš¨ Privilege Escalation
    "AttachRolePolicy", "DetachRolePolicy", "PassRole", "UpdateAssumeRolePolicy",
    "CreatePolicyVersion", "SetDefaultPolicyVersion",

    # ðŸš¨ User & Role Management
    "CreateUser", "DeleteUser", "UpdateUser",
    "CreateRole", "DeleteRole", "UpdateRole",
    "AddUserToGroup", "RemoveUserFromGroup",

    # ðŸš¨ Access Key & Login Profile (Account Takeover)
    "CreateAccessKey", "DeleteAccessKey", "UpdateAccessKey",
    "CreateLoginProfile", "UpdateLoginProfile", "DeleteLoginProfile",

    # ðŸš¨ Policy & Permissions Management
    "CreatePolicy", "DeletePolicy", "PutUserPolicy", "DeleteUserPolicy",
    "PutRolePolicy", "DeleteRolePolicy",

    # ðŸš¨ MFA & Security Controls Bypass
    "DeactivateMFADevice", "EnableMFADevice", "ResyncMFADevice",
    "UpdateAccountPasswordPolicy",

    # ðŸš¨ Assume Role (Lateral Movement)
    "AssumeRole", "GetSessionToken", "GetFederationToken",

    # ðŸš¨ Service-Linked Role Modifications
    "DeleteServiceLinkedRole", "UpdateServiceLinkedRole",

    # ðŸš¨ Instance Profile Manipulation (AWS Resource Takeover)
    "CreateInstanceProfile", "DeleteInstanceProfile",
    "AddRoleToInstanceProfile", "RemoveRoleFromInstanceProfile",

    # ðŸš¨ Credential & Secrets Exposure
    "GetSecretValue", "PutSecretValue", "DeleteSecret",
    "GetParameter", "PutParameter", "DeleteParameter",

    # ðŸš¨ CloudTrail & Logging Manipulation (Covering Tracks)
    "StopLogging", "DeleteTrail", "UpdateTrail",
    "PutEventSelectors", "PutInsightSelectors"
]

import boto3
import json

# AWS Clients
dynamodb = boto3.resource("dynamodb")
table = dynamodb.Table("IAMThreatLogs")
bedrock = boto3.client("bedrock-runtime")  # AWS Bedrock Runtime API

# Define Suspicious Actions
SUSPICIOUS_ACTIONS = [
    "AttachRolePolicy", "PassRole", "CreateUser", "CreateAccessKey", "DeleteUser",
    "AssumeRole", "UpdateAssumeRolePolicy", "StopLogging"
]

# Lambda Function
def lambda_handler(event, context):
    response = table.scan(Limit=10)  # Get recent 10 logs
    logs = response["Items"]

    findings = []
    
    for log in logs:
        if log["eventName"] in SUSPICIOUS_ACTIONS:
            # âœ… Safely extract user ARN or fallback to "Unknown"
            user_identity = log.get("userIdentity", {})
            user_arn = user_identity.get("arn", user_identity.get("principalId", "Unknown"))

            prompt = f"Analyze this IAM event for security risks:\n{json.dumps(log, indent=2)}"
            
            # Call AWS Bedrock Titan Embedding
            bedrock_response = bedrock.invoke_model(
                modelId="amazon.titan-embed-text-v1",  
                body=json.dumps({"prompt": prompt, "max_tokens_to_sample": 200})
            )
            
            result = json.loads(bedrock_response["body"].read().decode("utf-8"))
            risk_assessment = result.get("completion", "No analysis available")

            findings.append({
                "event": log["eventName"],
                "user": user_arn,
                "risk_assessment": risk_assessment
            })
    
    return {"status": "Analysis Complete", "findings": findings}


import boto3
import json

# AWS Clients
dynamodb = boto3.resource("dynamodb")
table = dynamodb.Table("IAMThreatLogs")
bedrock = boto3.client("bedrock-runtime")  # AWS Bedrock Runtime API

# Define Suspicious Actions
SUSPICIOUS_ACTIONS = [
    "AttachRolePolicy", "PassRole", "CreateUser", "CreateAccessKey", "DeleteUser",
    "AssumeRole", "UpdateAssumeRolePolicy", "StopLogging"
]

# Lambda Function
def lambda_handler(event, context):
    response = table.scan(Limit=10)  # Get recent 10 logs
    logs = response["Items"]

    findings = []
    
    for log in logs:
        if log["eventName"] in SUSPICIOUS_ACTIONS:
            # âœ… Safely extract user ARN or fallback to "Unknown"
            user_identity = log.get("userIdentity", {})
            user_arn = user_identity.get("arn", user_identity.get("principalId", "Unknown"))

            # âœ… Titan requires "inputText" instead of "prompt"
            request_body = json.dumps({"inputText": json.dumps(log, indent=2)})

            try:
                # Call AWS Bedrock Titan Embedding
                bedrock_response = bedrock.invoke_model(
                    modelId="amazon.titan-embed-text-v1",  
                    body=request_body
                )
                
                result = json.loads(bedrock_response["body"].read().decode("utf-8"))
                embeddings = result.get("embedding", [])  # Titan returns embeddings

                findings.append({
                    "event": log["eventName"],
                    "user": user_arn,
                    "embeddings": embeddings[:5]  # Show first 5 values for testing
                })
            
            except Exception as e:
                findings.append({
                    "event": log["eventName"],
                    "user": user_arn,
                    "error": str(e)
                })

    return {"status": "Analysis Complete", "findings": findings}

import boto3
import json

# AWS Clients
dynamodb = boto3.resource("dynamodb")
table = dynamodb.Table("IAMThreatLogs")
bedrock = boto3.client("bedrock-runtime")  # AWS Bedrock Runtime API

# Define Suspicious Actions
SUSPICIOUS_ACTIONS = [
    "AttachRolePolicy", "PassRole", "CreateUser", "CreateAccessKey", "DeleteUser",
    "AssumeRole", "UpdateAssumeRolePolicy", "StopLogging", "PutRolePolicy", "DeleteRolePolicy"
]

# Lambda Function
def lambda_handler(event, context):
    response = table.scan(Limit=10)  # Get recent 10 logs
    logs = response["Items"]

    findings = []
    
    for log in logs:
        if log["eventName"] in SUSPICIOUS_ACTIONS:
            # âœ… Extract user ARN safely
            user_identity = log.get("userIdentity", {})
            user_arn = user_identity.get("arn", user_identity.get("principalId", "Unknown"))

            # âœ… Use Claude 3 for threat analysis
            request_body = json.dumps({
                "prompt": f"Analyze this IAM event and detect potential threats:\n{json.dumps(log, indent=2)}",
                "max_tokens": 500,
                "temperature": 0.2
            })

            try:
                # Call AWS Bedrock Claude 3 Model
                bedrock_response = bedrock.invoke_model(
                    modelId="anthropic.claude-3",
                    body=request_body
                )

                result = json.loads(bedrock_response["body"].read().decode("utf-8"))
                risk_assessment = result.get("completion", "No analysis available")

                findings.append({
                    "event": log["eventName"],
                    "user": user_arn,
                    "risk_assessment": risk_assessment
                })
            
            except Exception as e:
                findings.append({
                    "event": log["eventName"],
                    "user": user_arn,
                    "error": str(e)
                })

    return {"status": "Analysis Complete", "findings": findings}

import boto3
import json
import decimal

# AWS Clients
dynamodb = boto3.resource("dynamodb")
table = dynamodb.Table("IAMThreatLogs")
bedrock = boto3.client("bedrock-runtime")  # AWS Bedrock Runtime API

# Define Suspicious Actions
SUSPICIOUS_ACTIONS = [
    "AttachRolePolicy", "PassRole", "CreateUser", "CreateAccessKey", "DeleteUser",
    "AssumeRole", "UpdateAssumeRolePolicy", "StopLogging", "PutRolePolicy", "DeleteRolePolicy"
]

# Function to convert DynamoDB Decimal to standard Python types
def convert_decimals(obj):
    if isinstance(obj, list):
        return [convert_decimals(i) for i in obj]
    elif isinstance(obj, dict):
        return {k: convert_decimals(v) for k, v in obj.items()}
    elif isinstance(obj, decimal.Decimal):  # âœ… Convert Decimal to int or float
        return int(obj) if obj % 1 == 0 else float(obj)
    else:
        return obj

# Lambda Function
def lambda_handler(event, context):
    response = table.scan(Limit=10)  # Get recent 10 logs
    logs = response["Items"]

    findings = []
    
    for log in logs:
        if log["eventName"] in SUSPICIOUS_ACTIONS:
            # âœ… Convert Decimal values
            log = convert_decimals(log)

            # âœ… Extract user ARN safely
            user_identity = log.get("userIdentity", {})
            user_arn = user_identity.get("arn", user_identity.get("principalId", "Unknown"))

            # âœ… Use Claude 3 for threat analysis
            request_body = json.dumps({
                "prompt": f"Analyze this IAM event and detect potential threats:\n{json.dumps(log, indent=2)}",
                "max_tokens": 500,
                "temperature": 0.2
            })

            try:
                # Call AWS Bedrock Claude 3 Model
                bedrock_response = bedrock.invoke_model(
                    modelId="anthropic.claude-3",
                    body=request_body
                )

                result = json.loads(bedrock_response["body"].read().decode("utf-8"))
                risk_assessment = result.get("completion", "No analysis available")

                findings.append({
                    "event": log["eventName"],
                    "user": user_arn,
                    "risk_assessment": risk_assessment
                })
            
            except Exception as e:
                findings.append({
                    "event": log["eventName"],
                    "user": user_arn,
                    "error": str(e)
                })

    return {"status": "Analysis Complete", "findings": findings}
import boto3
import json
import decimal

# AWS Clients
dynamodb = boto3.resource("dynamodb")
table = dynamodb.Table("IAMThreatLogs")
bedrock = boto3.client("bedrock-runtime")  # AWS Bedrock Runtime API

# Define Suspicious Actions
SUSPICIOUS_ACTIONS = [
    "AttachRolePolicy", "PassRole", "CreateUser", "CreateAccessKey", "DeleteUser",
    "UpdateRole", "PutUserPolicy", "DeleteRolePolicy", "UpdateAssumeRolePolicy"
]

# Convert Decimal to JSON
class DecimalEncoder(json.JSONEncoder):
    def default(self, obj):
        if isinstance(obj, decimal.Decimal):
            return float(obj)
        return super(DecimalEncoder, self).default(obj)

# Lambda Function
def lambda_handler(event, context):
    response = table.scan(Limit=10)  # Get recent 10 logs
    logs = response["Items"]

    findings = []

    for log in logs:
        if log["eventName"] in SUSPICIOUS_ACTIONS:
            prompt = f"Analyze this IAM event for security risks:\n{json.dumps(log, indent=2, cls=DecimalEncoder)}"

            # Proper Titan API Request Format
            body_payload = json.dumps({
                "inputText": prompt,
                "textGenerationConfig": {
                    "maxTokenCount": 512,   # Increased token count for better analysis
                    "temperature": 0.7,     # Moderate randomness
                    "topP": 0.9,            # Keeps response diverse but relevant
                    "stopSequences": []     # No stop sequences
                }
            })

            try:
                bedrock_response = bedrock.invoke_model(
                    modelId="amazon.titan-text-express-v1",
                    body=body_payload
                )
                result = json.loads(bedrock_response["body"].read().decode("utf-8"))
                
                # Extracting the model response
                risk_assessment = result.get("results", [{}])[0].get("outputText", "No analysis available")

                findings.append({
                    "event": log["eventName"],
                    "user": log.get("userIdentity", {}).get("arn", "Unknown"),
                    "risk_assessment": risk_assessment
                })

            except Exception as e:
                findings.append({
                    "event": log["eventName"],
                    "user": log.get("userIdentity", {}).get("arn", "Unknown"),
                    "error": f"Error analyzing event: {str(e)}"
                })

    return {"status": "Analysis Complete", "findings": findings}

import boto3
import json
import decimal

# AWS Clients
dynamodb = boto3.resource("dynamodb")
table = dynamodb.Table("IAMThreatLogs")
bedrock = boto3.client("bedrock-runtime")

# Define High-Risk IAM Actions
SUSPICIOUS_ACTIONS = [
    "CreateUser", "DeleteUser", "AttachUserPolicy", "DetachUserPolicy",
    "CreateRole", "DeleteRole", "AttachRolePolicy", "DetachRolePolicy",
    "CreateAccessKey", "DeleteAccessKey", "UpdateAccessKey",
    "AssumeRole", "PassRole", "UpdateAssumeRolePolicy",
    "DeactivateMFADevice", "DeleteVirtualMFADevice",
    "CreatePolicy", "DeletePolicy", "PutUserPolicy", "DeleteUserPolicy"
]

# Function to Convert Decimal to Float (Fix DynamoDB JSON Serialization Issue)
class DecimalEncoder(json.JSONEncoder):
    def default(self, obj):
        if isinstance(obj, decimal.Decimal):
            return float(obj)
        return super(DecimalEncoder, self).default(obj)

# Lambda Handler
def lambda_handler(event, context):
    response = table.scan(Limit=10)  # Fetch latest 10 IAM logs
    logs = response["Items"]

    findings = []

    for log in logs:
        if log["eventName"] in SUSPICIOUS_ACTIONS:
            prompt = f"""
            Analyze this AWS IAM event for security threats:
            {json.dumps(log, indent=2, cls=DecimalEncoder)}
            
            Identify potential security risks and provide mitigation strategies.
            """

            try:
                # Call Claude 3.5 Sonnet for Threat Analysis
                bedrock_response = bedrock.invoke_model(
                    modelId="anthropic.claude-3.5-sonnet",
                    body=json.dumps({"prompt": prompt, "max_tokens": 500})
                )

                result = json.loads(bedrock_response["body"].read().decode("utf-8"))
                risk_assessment = result.get("completion", "No analysis available")

                findings.append({
                    "event": log["eventName"],
                    "user": log.get("userIdentity", {}).get("arn", "Unknown"),
                    "risk_assessment": risk_assessment
                })

            except Exception as e:
                findings.append({
                    "event": log["eventName"],
                    "user": log.get("userIdentity", {}).get("arn", "Unknown"),
                    "error": str(e)
                })

    return {"status": "Analysis Complete", "findings": findings}

import boto3
import json
import decimal

# AWS Clients
dynamodb = boto3.resource("dynamodb")
table = dynamodb.Table("IAMThreatLogs")
bedrock = boto3.client("bedrock-runtime")

# Define Suspicious Actions
SUSPICIOUS_ACTIONS = [
    "AttachRolePolicy", "PassRole", "CreateUser", "CreateAccessKey", "DeleteUser",
    "AssumeRole", "DetachRolePolicy", "DeleteAccessKey", "UpdateLoginProfile",
    "DeleteLoginProfile", "CreateRole", "DeleteRole", "PutRolePolicy"
]

# Convert DynamoDB Decimal values to JSON serializable format
def decimal_default(obj):
    if isinstance(obj, decimal.Decimal):
        return float(obj)
    raise TypeError

# Lambda Function
def lambda_handler(event, context):
    response = table.scan(Limit=10)  # Get recent 10 logs
    logs = response["Items"]

    findings = []
    
    for log in logs:
        if log["eventName"] in SUSPICIOUS_ACTIONS:
            log_json = json.dumps(log, indent=2, default=decimal_default)  # Fix Decimal issue

            # **Fix Prompt Format for Claude 3.5**
            prompt = f"\n\nHuman: Analyze this IAM event for security risks:\n{log_json}\n\nAssistant:"

            try:
                bedrock_response = bedrock.invoke_model(
                    modelId="anthropic.claude-3.5-sonnet",
                    body=json.dumps({
                        "prompt": prompt,
                        "max_tokens": 300  # Limit response length
                    })
                )
                
                result = json.loads(bedrock_response["body"].read().decode("utf-8"))
                risk_assessment = result.get("completion", "No analysis available")

                findings.append({
                    "event": log["eventName"],
                    "user": log["userIdentity"].get("arn", "Unknown"),
                    "risk_assessment": risk_assessment
                })

            except Exception as e:
                findings.append({
                    "event": log["eventName"],
                    "user": log["userIdentity"].get("arn", "Unknown"),
                    "error": str(e)
                })
    
    return {"status": "Analysis Complete", "findings": findings}

import boto3
import json
import decimal

# AWS Clients
dynamodb = boto3.resource("dynamodb")
table = dynamodb.Table("IAMThreatLogs")
bedrock = boto3.client("bedrock-runtime")

# Define Suspicious Actions
SUSPICIOUS_ACTIONS = [
    "AttachRolePolicy", "PassRole", "CreateUser", "CreateAccessKey", "DeleteUser",
    "AssumeRole", "DetachRolePolicy", "DeleteAccessKey", "UpdateLoginProfile",
    "DeleteLoginProfile", "CreateRole", "DeleteRole", "PutRolePolicy"
]

# Convert DynamoDB Decimal values to JSON serializable format
def decimal_default(obj):
    if isinstance(obj, decimal.Decimal):
        return float(obj)
    raise TypeError

# Lambda Function
def lambda_handler(event, context):
    response = table.scan(Limit=10)  # Get recent 10 logs
    logs = response["Items"]

    findings = []
    
    for log in logs:
        if log["eventName"] in SUSPICIOUS_ACTIONS:
            log_json = json.dumps(log, indent=2, default=decimal_default)  # Fix Decimal issue

            # **Fix Prompt Format for Claude**
            prompt = f"\n\nHuman: Analyze this IAM event for security risks:\n{log_json}\n\nAssistant:"

            try:
                bedrock_response = bedrock.invoke_model(
                    modelId="anthropic.claude-3.5-sonnet",
                    body=json.dumps({
                        "prompt": prompt,
                        "max_tokens_to_sample": 300  # Corrected Key
                    })
                )
                
                result = json.loads(bedrock_response["body"].read().decode("utf-8"))
                risk_assessment = result.get("completion", "No analysis available")

                findings.append({
                    "event": log["eventName"],
                    "user": log["userIdentity"].get("arn", "Unknown"),
                    "risk_assessment": risk_assessment
                })

            except Exception as e:
                findings.append({
                    "event": log["eventName"],
                    "user": log["userIdentity"].get("arn", "Unknown"),
                    "error": str(e)
                })
    
    return {"status": "Analysis Complete", "findings": findings}

import boto3
import json
import decimal

# AWS Clients
dynamodb = boto3.resource("dynamodb")
table = dynamodb.Table("IAMThreatLogs")
bedrock = boto3.client("bedrock-runtime")

# Define Suspicious Actions
SUSPICIOUS_ACTIONS = [
    "AttachRolePolicy", "PassRole", "CreateUser", "CreateAccessKey", "DeleteUser",
    "AssumeRole", "DetachRolePolicy", "DeleteAccessKey", "UpdateLoginProfile",
    "DeleteLoginProfile", "CreateRole", "DeleteRole", "PutRolePolicy"
]

# Convert DynamoDB Decimal values to JSON serializable format
def decimal_default(obj):
    if isinstance(obj, decimal.Decimal):
        return float(obj)
    raise TypeError

# Lambda Function
def lambda_handler(event, context):
    response = table.scan(Limit=10)  # Get recent 10 logs
    logs = response["Items"]

    findings = []

    for log in logs:
        if log["eventName"] in SUSPICIOUS_ACTIONS:
            log_json = json.dumps(log, indent=2, default=decimal_default)  # Fix Decimal issue

            # **New Claude Messages API Format**
            messages_payload = {
                "modelId": "anthropic.claude-3.5-sonnet-20240620",
                "messages": [
                    {"role": "user", "content": f"Analyze this IAM event for security risks:\n{log_json}"}
                ],
                "max_tokens": 300
            }

            try:
                bedrock_response = bedrock.invoke_model_with_response_stream(
                    modelId="anthropic.claude-3.5-sonnet-20240620",
                    body=json.dumps(messages_payload)
                )
                
                response_stream = bedrock_response['body']
                result = json.loads(response_stream.read().decode("utf-8"))
                
                # Extract the response content
                risk_assessment = result.get("content", "No analysis available")

                findings.append({
                    "event": log["eventName"],
                    "user": log["userIdentity"].get("arn", "Unknown"),
                    "risk_assessment": risk_assessment
                })

            except Exception as e:
                findings.append({
                    "event": log["eventName"],
                    "user": log["userIdentity"].get("arn", "Unknown"),
                    "error": str(e)
                })
    
    return {"status": "Analysis Complete", "findings": findings}














import boto3
import json
import gzip
import time

# AWS Resources
S3_BUCKET_NAME = "your-cloudtrail-log-bucket"
DYNAMODB_TABLE_NAME = "IAMThreatLogs"

s3 = boto3.client("s3")
dynamodb = boto3.resource("dynamodb")
client = boto3.client("dynamodb")
bedrock = boto3.client("bedrock-runtime")  # AWS Bedrock Client

# Claude 3.5 Sonnet Model ID
CLAUDE_MODEL_ID = "anthropic.claude-3.5-sonnet-20240620"

# Suspicious IAM Actions
SUSPICIOUS_ACTIONS = [
    "AttachRolePolicy", "PassRole", "CreateUser", "CreateAccessKey", "DeleteUser",
    "AssumeRole", "CreateRole", "DeleteRole", "UpdateRole", "PutRolePolicy",
    "CreateInstanceProfile", "AddUserToGroup", "ChangePassword", "UpdateAccessKey"
]

# Function to check and create the table
def check_and_create_table():
    existing_tables = client.list_tables()["TableNames"]
    
    if DYNAMODB_TABLE_NAME not in existing_tables:
        print(f"Table {DYNAMODB_TABLE_NAME} not found. Creating...")
        client.create_table(
            TableName=DYNAMODB_TABLE_NAME,
            AttributeDefinitions=[{"AttributeName": "eventID", "AttributeType": "S"}],
            KeySchema=[{"AttributeName": "eventID", "KeyType": "HASH"}],
            BillingMode="PAY_PER_REQUEST"
        )

        # Wait until the table is active
        waiter = client.get_waiter("table_exists")
        waiter.wait(TableName=DYNAMODB_TABLE_NAME)
        print(f"Table {DYNAMODB_TABLE_NAME} created successfully!")

# Function to invoke Claude 3.5 for threat analysis
def analyze_with_claude(event_log):
    prompt = f"Analyze this IAM event for security risks:\n{json.dumps(event_log, indent=2)}"

    try:
        response = bedrock.invoke_model(
            modelId=CLAUDE_MODEL_ID,
            body=json.dumps({
                "messages": [{"role": "user", "content": prompt}],
                "max_tokens": 300
            })
        )

        result = json.loads(response["body"].read().decode("utf-8"))
        return result.get("content", "No analysis available")
    
    except Exception as e:
        print(f"Error invoking Claude 3.5: {e}")
        return "Error analyzing event"

# Lambda Function
def lambda_handler(event, context):
    check_and_create_table()  # Ensure table exists before inserting logs

    print("Received event:", json.dumps(event, indent=4))

    try:
        # Extract S3 object key
        if "Records" in event and len(event["Records"]) > 0 and "s3" in event["Records"][0]:
            bucket_name = event["Records"][0]["s3"]["bucket"]["name"]
            object_key = event["Records"][0]["s3"]["object"]["key"]
        else:
            bucket_name = S3_BUCKET_NAME
            object_key = "AWSLogs/123456789012/CloudTrail/us-east-1/2025/03/06/correct-log-file.json.gz"

        print(f"Fetching file: {object_key} from bucket: {bucket_name}")

        response = s3.get_object(Bucket=bucket_name, Key=object_key)
        log_data = gzip.decompress(response["Body"].read()).decode("utf-8")
        cloudtrail_events = json.loads(log_data)["Records"]

        table = dynamodb.Table(DYNAMODB_TABLE_NAME)
        findings = []

        for log in cloudtrail_events:
            log["eventID"] = log.get("eventID", str(time.time()))  # Ensure primary key exists
            table.put_item(Item=log)

            # Check for suspicious IAM actions
            if log.get("eventName") in SUSPICIOUS_ACTIONS:
                analysis = analyze_with_claude(log)
                findings.append({
                    "event": log["eventName"],
                    "user": log.get("userIdentity", {}).get("arn", "Unknown"),
                    "risk_assessment": analysis
                })

        return {"status": "Analysis Complete", "findings": findings}

    except Exception as e:
        print(f"Error processing event: {e}")
        return {"status": "Error processing event", "error": str(e)}

import boto3
import json
import gzip
import time
from decimal import Decimal

# AWS Resource Initialization
s3 = boto3.client("s3")
dynamodb = boto3.resource("dynamodb")
bedrock = boto3.client("bedrock-runtime")
client = boto3.client("dynamodb")

# Configuration
S3_BUCKET_NAME = "your-cloudtrail-log-bucket"
DYNAMODB_TABLE_NAME = "IAMThreatLogs"
CLAUDE_MODEL_ID = "anthropic.claude-3.5-sonnet-20240620-v1:0"

# Define Suspicious Actions
SUSPICIOUS_ACTIONS = [
    "AttachRolePolicy", "PassRole", "CreateUser", "CreateAccessKey", "DeleteUser",
    "AssumeRole", "CreatePolicy", "PutUserPolicy", "UpdateRole", "DetachRolePolicy",
    "DeleteRole", "DeletePolicy", "DeleteAccessKey"
]

# Function to check and create the table if not exists
def check_and_create_table():
    existing_tables = client.list_tables()["TableNames"]
    
    if DYNAMODB_TABLE_NAME not in existing_tables:
        print(f"Table {DYNAMODB_TABLE_NAME} not found. Creating...")
        client.create_table(
            TableName=DYNAMODB_TABLE_NAME,
            AttributeDefinitions=[{"AttributeName": "eventID", "AttributeType": "S"}],
            KeySchema=[{"AttributeName": "eventID", "KeyType": "HASH"}],
            BillingMode="PAY_PER_REQUEST"
        )

        # Wait until the table is active
        waiter = client.get_waiter("table_exists")
        waiter.wait(TableName=DYNAMODB_TABLE_NAME)
        print(f"Table {DYNAMODB_TABLE_NAME} created successfully!")

# Function to convert Decimal types to JSON serializable format
def json_serializer(obj):
    if isinstance(obj, Decimal):
        return float(obj)
    raise TypeError("Type not serializable")

# Lambda Function
def lambda_handler(event, context):
    check_and_create_table()  # Ensure table exists before inserting logs

    print("Received event:", json.dumps(event, indent=4, default=str))

    try:
        # Extract S3 object key
        if "Records" in event and len(event["Records"]) > 0 and "s3" in event["Records"][0]:
            bucket_name = event["Records"][0]["s3"]["bucket"]["name"]
            object_key = event["Records"][0]["s3"]["object"]["key"]
        else:
            bucket_name = S3_BUCKET_NAME
            object_key = "AWSLogs/123456789012/CloudTrail/us-east-1/2025/03/06/correct-log-file.json.gz"

        print(f"Fetching file: {object_key} from bucket: {bucket_name}")

        response = s3.get_object(Bucket=bucket_name, Key=object_key)
        log_data = gzip.decompress(response["Body"].read()).decode("utf-8")
        cloudtrail_events = json.loads(log_data)["Records"]

        table = dynamodb.Table(DYNAMODB_TABLE_NAME)

        findings = []

        for log in cloudtrail_events:
            log["eventID"] = log.get("eventID", str(time.time()))  # Ensure primary key exists
            table.put_item(Item=log)  # Store log in DynamoDB

            # Check for suspicious IAM events
            if log["eventName"] in SUSPICIOUS_ACTIONS:
                messages = [
                    {"role": "user", "content": f"Analyze this IAM event for security risks:\n{json.dumps(log, indent=2, default=json_serializer)}"}
                ]

                try:
                    bedrock_response = bedrock.invoke_model(
                        modelId=CLAUDE_MODEL_ID,
                        body=json.dumps({
                            "messages": messages,
                            "max_tokens": 300,
                            "temperature": 0.5,
                            "anthropic_version": "bedrock-2023-05-31"
                        })
                    )

                    response_body = json.loads(bedrock_response["body"].read().decode("utf-8"))
                    risk_assessment = response_body.get("content", "No analysis available")

                    findings.append({
                        "event": log["eventName"],
                        "user": log.get("userIdentity", {}).get("arn", "Unknown"),
                        "risk_assessment": risk_assessment
                    })
                except Exception as bedrock_error:
                    print(f"Error invoking Claude 3.5: {bedrock_error}")
                    findings.append({
                        "event": log["eventName"],
                        "user": log.get("userIdentity", {}).get("arn", "Unknown"),
                        "error": str(bedrock_error)
                    })

        return {"status": "Analysis Complete", "findings": findings}

    except Exception as e:
        print(f"Error processing event: {e}")
        return {"status": "Error processing event", "error": str(e)}










import boto3
import json
import gzip

# AWS Services
s3 = boto3.client("s3")
bedrock = boto3.client("bedrock-runtime")

# Claude 3.5 Sonnet Model ID
CLAUDE_MODEL_ID = "anthropic.claude-3-5-sonnet-20240620-v1:0"

# Suspicious IAM Actions
SUSPICIOUS_ACTIONS = [
    "AttachRolePolicy", "PassRole", "CreateUser", "CreateAccessKey", "DeleteUser",
    "AssumeRole", "CreatePolicy", "DeleteRole", "PutUserPolicy", "UpdateAssumeRolePolicy",
    "AttachUserPolicy", "DetachUserPolicy"
]

# Function to fetch & preprocess CloudTrail logs
def preprocess_iam_logs(bucket_name, object_key):
    try:
        # Fetch S3 object
        response = s3.get_object(Bucket=bucket_name, Key=object_key)

        # Decompress the CloudTrail log file
        log_data = gzip.decompress(response["Body"].read()).decode("utf-8")

        # Parse JSON
        cloudtrail_events = json.loads(log_data)["Records"]

        # Filter IAM-related logs
        iam_logs = [
            log for log in cloudtrail_events
            if log.get("eventSource") == "iam.amazonaws.com" and log.get("eventName") in SUSPICIOUS_ACTIONS
        ]

        return iam_logs

    except Exception as e:
        print(f"Error processing S3 object: {e}")
        return None

# Function to analyze logs using Claude 3.5 Sonnet
def analyze_logs_with_claude(logs):
    try:
        messages = [
            {"role": "system", "content": "You are a cybersecurity expert analyzing IAM events for security risks."}
        ]

        for log in logs:
            messages.append({
                "role": "user",
                "content": f"Analyze this IAM event for security risks:\n{json.dumps(log, indent=2)}"
            })

        # Invoke Claude 3.5 Sonnet on AWS Bedrock
        response = bedrock.invoke_model(
            modelId=CLAUDE_MODEL_ID,
            body=json.dumps({
                "anthropic_version": "bedrock-2023-05-31",
                "messages": messages,
                "max_tokens": 500,
                "temperature": 0.7
            })
        )

        result = json.loads(response["body"].read().decode("utf-8"))
        return result

    except Exception as e:
        print(f"Error invoking Claude 3.5: {e}")
        return None

# Lambda Handler
def lambda_handler(event, context):
    bucket = "your-cloudtrail-log-bucket"
    object_key = "AWSLogs/123456789012/CloudTrail/us-east-1/2025/03/06/log-file.json.gz"

    # Preprocess logs
    logs = preprocess_iam_logs(bucket, object_key)
    if not logs:
        return {"status": "No relevant IAM logs found"}

    # Analyze logs with Claude
    analysis = analyze_logs_with_claude(logs)

    return {"status": "Analysis Complete", "findings": analysis}

iam_logs = []
for log in cloudtrail_events:
    print("Checking log:", json.dumps(log, indent=2))  # Debugging
    if log.get("eventSource") == "iam.amazonaws.com":
        iam_logs.append(log)  # Add all IAM events for testing

print(f"Total IAM logs found: {len(iam_logs)}")

