To include the full steps for adding a new repository, configuring your AWS account, and creating the KMS key using Terraform, here is a more detailed guide. The guide includes everything from setting up a new repository, adding code, creating a pull request (PR), and deploying the changes.

Complete Steps for Adding a New Repository and KMS Key Creation using Terraform

Part 1: Creating and Configuring a Git Repository

1. Create a New Git Repository on GitHub

	•	Go to GitHub (or your preferred Git service provider).
	•	Click on the New Repository button or the + icon in the top right corner.
	•	Enter your repository name (e.g., kms-key-terraform).
	•	Add a description (optional).
	•	Choose whether the repository will be public or private.
	•	Initialize the repository with a README file (optional).
	•	Click Create repository.

2. Clone the Repository Locally

After creating the repository, clone it to your local machine:

git clone https://github.com/your-username/kms-key-terraform.git
cd kms-key-terraform

3. Create a New Branch for the KMS Key Code

Before making changes, create a new branch to keep the main branch clean.

git checkout -b add-kms-key-feature

Part 2: Writing Terraform Code to Create KMS Key

	1.	Create Directory Structure

Create the necessary directory structure to organize your Terraform code. In this case, we’ll use a policy folder for the KMS policy file and keep the Terraform configuration in the root.

mkdir policy
touch main.tf
touch policy/kms_policy.json

	2.	Add the KMS Policy to policy/kms_policy.json

In your policy/kms_policy.json file, add the KMS key policy:

{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
        "AWS": [
          "arn:aws:iam::account-1-id:role/role-in-account-1",
          "arn:aws:iam::account-2-id:role/role-in-account-2"
        ]
      },
      "Action": [
        "kms:Encrypt",
        "kms:Decrypt",
        "kms:ReEncrypt*",
        "kms:GenerateDataKey",
        "kms:DescribeKey"
      ],
      "Resource": "${kms_key_arn}"  # Placeholder for the KMS key ARN
    }
  ]
}

	3.	Write Terraform Code to Create the KMS Key in main.tf

In your main.tf file, write the Terraform code to create the KMS key and reference the policy file:

# Provider block
provider "aws" {
  region = "us-east-1"  # Replace with your desired region
}

# Create a KMS Key
resource "aws_kms_key" "my_kms_key" {
  description             = "KMS key with cross-account access policy"
  enable_key_rotation     = true
  deletion_window_in_days = 10

  # Reference the policy stored in an external JSON file
  policy = templatefile("${path.module}/policy/kms_policy.json", {
    kms_key_arn = aws_kms_key.my_kms_key.arn  # Dynamically insert the KMS key ARN
  })
}

# Optionally, create an alias for easier identification
resource "aws_kms_alias" "my_kms_alias" {
  name          = "alias/my-key-alias"
  target_key_id = aws_kms_key.my_kms_key.key_id
}

# Outputs
output "kms_key_id" {
  value = aws_kms_key.my_kms_key.id
}

output "kms_key_arn" {
  value = aws_kms_key.my_kms_key.arn
}

Part 3: Commit and Push the Changes

After writing the Terraform code and the policy, commit the changes and push them to the remote repository.

1. Stage and Commit the Changes

git add .
git commit -m "Add KMS key creation and policy"

2. Push the Changes to Remote

git push origin add-kms-key-feature

Part 4: Creating a Pull Request (PR)

Now that your changes are pushed to the remote repository, follow these steps to create a PR:

	1.	Go to GitHub: Navigate to the repository on GitHub.
	2.	Switch to the Branch: Ensure you are on the add-kms-key-feature branch.
	3.	Click “Compare & pull request”: GitHub will display a button once it detects the new branch.
	4.	Fill in the PR Details:
	•	Title: “Add KMS key creation and cross-account policy.”
	•	Description: “This PR adds the functionality to create a KMS key with a custom policy allowing cross-account access.”
	•	Reviewers: Assign any required reviewers.
	5.	Create Pull Request: Click the “Create pull request” button.

Part 5: Deploying the Terraform Changes

Once the pull request is approved and merged, you will need to apply the Terraform changes to deploy the KMS key in your AWS environment.

1. Initialize Terraform

If you are running Terraform for the first time or in a new environment, you need to initialize it.

terraform init

2. Plan the Changes

Generate a plan to ensure the Terraform configuration is correct.

terraform plan

This will show the actions Terraform will take, including creating the KMS key and applying the policy.

3. Apply the Changes

After reviewing the plan, apply the changes to deploy the KMS key:

terraform apply

Confirm the operation by typing yes when prompted.

Part 6: Verifying the KMS Key and Policy

After successfully applying the Terraform configuration, you can verify that the KMS key was created:

	1.	Log in to the AWS Console.
	2.	Navigate to KMS (Key Management Service).
	3.	Verify the Key: Check that the KMS key is listed with the correct description and cross-account policy.
	4.	Verify the Policy: Check the key policy in the KMS console to ensure it includes the accounts you specified.

Recap of Steps:

	1.	Create a new GitHub repository.
	2.	Write Terraform code to create a KMS key and store the policy in a separate file.
	3.	Commit the changes to a new branch and push them to the repository.
	4.	Create a pull request to review and merge the changes.
	5.	After merging, deploy the Terraform configuration to create the KMS key in your AWS environment.
	6.	Verify the key and its policy in the AWS Management Console.

By following these steps, you will successfully create and manage KMS keys with custom policies using Terraform while maintaining proper version control and collaboration through Git and GitHub.
