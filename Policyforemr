import boto3

def analyze_iam_policy(role_name):
    iam = boto3.client('iam')

    # Get the role's policy
    role_policy = iam.get_role_policy(
        RoleName=role_name,
        PolicyName='AmazonS3FullAccess'  # Change this to your policy name
    )

    # Extract the policy document
    policy_document = role_policy['PolicyDocument']

    # Extract some basic information
    version = policy_document.get('Version', 'N/A')
    statement_count = len(policy_document.get('Statement', []))

    print("IAM Policy Analysis:")
    print(f"Version: {version}")
    print(f"Number of Statements: {statement_count}")

    # Analyze each statement in the policy
    for idx, statement in enumerate(policy_document.get('Statement', []), start=1):
        print(f"\nStatement {idx}:")
        effect = statement.get('Effect', 'N/A')
        actions = statement.get('Action', 'N/A')
        resources = statement.get('Resource', 'N/A')
        conditions = statement.get('Condition', 'N/A')

        print(f"Effect: {effect}")
        print(f"Actions: {actions}")
        print(f"Resources: {resources}")
        print(f"Conditions: {conditions}")

# Example IAM role name
role_name = 'your-role-name'  # Replace 'your-role-name' with your actual IAM role name

# Analyze the IAM role policy
analyze_iam_policy(role_name)


import boto3
import json

def is_permission_in_policy(role_name, permission):
    # Create IAM client
    iam_client = boto3.client('iam')

    # Get the policy
    response = iam_client.get_role_policy(
        RoleName=role_name,
        PolicyName='your-policy-name'  # Replace 'your-policy-name' with the actual policy name
    )

    # Extract policy document
    policy_document = json.loads(response['PolicyDocument'])

    # Check if permission is in policy
    for statement in policy_document['Statement']:
        if 'Action' in statement and permission in statement['Action']:
            return True

    return False

# Example usage:
role_name = 'your-role-name'
permission = 's3:GetObject'  # Replace with the permission you want to check
is_permission_present = is_permission_in_policy(role_name, permission)
if is_permission_present:
    print(f"Permission '{permission}' is present in the policy for role '{role_name}'.")
else:
    print(f"Permission '{permission}' is not present in the policy for role '{role_name}'.")
import boto3

def get_attached_policy_documents(account_id):
    iam_client = boto3.client('iam')
    
    # Get a list of IAM roles in the account
    roles = iam_client.list_roles()['Roles']
    
    for role in roles:
        role_name = role['RoleName']
        role_arn = role['Arn']
        
        # Get a list of attached policies for the current role
        attached_policies = iam_client.list_attached_role_policies(RoleName=role_name)['AttachedPolicies']
        
        print(f"Role: {role_name} ({role_arn})")
        if attached_policies:
            for policy in attached_policies:
                policy_name = policy['PolicyName']
                policy_arn = policy['PolicyArn']
                
                # Get the policy document for the attached policy
                policy_document = iam_client.get_policy(PolicyArn=policy_arn)['Policy']['DefaultVersionId']
                
                print(f"\tAttached Policy: {policy_name} ({policy_arn})")
                print(f"\tPolicy Document:\n{policy_document}\n")
        else:
            print("\tNo attached policies\n")

# Replace '123456789012' with your AWS account ID
account_id = '123456789012'
get_attached_policy_documents(account_id)

import boto3

def get_attached_policy_documents(account_id):
    iam_client = boto3.client('iam')
    
    # Get a list of IAM roles in the account
    roles = iam_client.list_roles()['Roles']
    
    for role in roles:
        role_name = role['RoleName']
        role_arn = role['Arn']
        
        # Get a list of attached policies for the current role
        attached_policies = iam_client.list_attached_role_policies(RoleName=role_name)['AttachedPolicies']
        
        print(f"Role: {role_name} ({role_arn})")
        if attached_policies:
            for policy in attached_policies:
                policy_name = policy['PolicyName']
                policy_arn = policy['PolicyArn']
                
                # Get the policy document for the attached policy
                policy_document = iam_client.get_policy(PolicyArn=policy_arn)['Policy']['DefaultVersionId']
                
                print(f"\tAttached Policy: {policy_name} ({policy_arn})")
                print(f"\tPolicy Document:\n{policy_document}\n")
        else:
            print("\tNo attached policies\n")

# Replace '123456789012' with your AWS account ID
account_id = '123456789012'
get_attached_policy_documents(account_id)



import boto3
import json

def analyze_role_policy(role_name, permissions_to_check):
    iam_client = boto3.client('iam')
    
    try:
        role = iam_client.get_role(RoleName=role_name)
        role_policy = iam_client.get_role_policy(RoleName=role_name, PolicyName=role['Role']['AssumeRolePolicyDocument'])
        policy_document = json.loads(role_policy['PolicyDocument'])
        permissions = set()

        if 'Statement' in policy_document:
            for statement in policy_document['Statement']:
                if 'Action' in statement:
                    actions = statement['Action']
                    if isinstance(actions, str):
                        permissions.add(actions)
                    elif isinstance(actions, list):
                        permissions.update(actions)

        print("Permissions found in the role's policy document:")
        for permission in permissions_to_check:
            if permission in permissions:
                print(f"{permission}: Found")
            else:
                print(f"{permission}: Not found")

    except iam_client.exceptions.NoSuchEntityException:
        print(f"Role '{role_name}' not found.")

def main():
    role_name = 'your_role_name'
    permissions_to_check = ['s3:GetObject', 'ec2:DescribeInstances', 'iam:ListRoles']  # Add permissions to check here

    analyze_role_policy(role_name, permissions_to_check)

if __name__ == "__main__":
    main()



import boto3
from botocore.exceptions import ClientError
import csv

def main():
    try:
        session = boto3.Session(profile_name='EXPN-NA-DEV-SEC-OPS-DEV')
        client = session.client('iam', region_name="us-east-1")
        account_num = session.client('sts').get_caller_identity().get('Account')
        print("Switching to", account_num)

        s3_perms_allow = ['s3:*', 's3:CreateBucket']
        ec2_perms_allow = ['ec2:*', 'ec2:CreateInstance', 'ec2:StartInstance']
        s3_perms_deny = ['s3:DeleteBucket']
        ec2_perms_deny = ['ec2:StopInstance', 'ec2:AttachInternetGateway', 'ec2:DetachNetworkInterface', 'iam:Create*']

        with open("finalreport.csv", 'w', newline='') as f:
            writer = csv.writer(f)
            writer.writerow(["Role Name", "Policy Name", "S3 Allow", "S3 Deny", "ec2_allow", "ec2_deny", "AccountNum"])

            paginator = client.get_paginator("list_roles")
            for response in paginator.paginate(PaginationConfig={'MaxItems': 1000}):
                for role in response['Roles']:
                    role_name = role["RoleName"]
                    print("Role name:", role_name)

                    # Fetch policies attached to the role
                    attached_policies = client.list_attached_role_policies(RoleName=role['RoleName'])['AttachedPolicies']
                    policies_list = []
                    s3_allow_list = []
                    s3_deny_list = []
                    ec2_allow_list = []
                    ec2_deny_list = []

                    for policy in attached_policies:
                        policy_document = client.get_policy(PolicyArn=policy['PolicyArn'])['Policy']['DefaultVersionId']
                        policy_version = client.get_policy_version(PolicyArn=policy['PolicyArn'],
                                                                   VersionId=policy_document)['PolicyVersion']['Document']

                        for statement in policy_version.get('Statement', []):
                            effect = statement.get('Effect', 'N/A')
                            actions = statement.get('Action', 'N/A')

                            if effect == 'Allow':
                                for s3_perm_allow in s3_perms_allow:
                                    if s3_perm_allow in actions:
                                        s3_allow_list.append(s3_perm_allow)

                                for ec2_perm_allow in ec2_perms_allow:
                                    if ec2_perm_allow in actions:
                                        ec2_allow_list.append(ec2_perm_allow)

                            elif effect == 'Deny':
                                for s3_perm_deny in s3_perms_deny:
                                    if s3_perm_deny in actions:
                                        s3_deny_list.append(s3_perm_deny)

                                for ec2_perm_deny in ec2_perms_deny:
                                    if ec2_perm_deny in actions:
                                        ec2_deny_list.append(ec2_perm_deny)

                    writer.writerow([role_name,
                                     ','.join(policies_list),
                                     ','.join(s3_allow_list),
                                     ','.join(s3_deny_list),
                                     ','.join(ec2_allow_list),
                                     ','.join(ec2_deny_list),
                                     account_num])

                    print(role_name, "---->", policies_list, s3_allow_list, s3_deny_list, ec2_allow_list, ec2_deny_list, account_num)

    except ClientError as e:
        print("Error:", e)

if __name__ == "__main__":
    main()
import boto3
import csv
import openpyxl
from botocore.exceptions import ClientError

def main():
    sts_client = boto3.client('sts')
    with open("finalreport.csv", 'w', newline='') as f:
        writer = csv.writer(f)
        writer.writerow(["Role Name", "Policy Name", "S3 Allow", "S3 Deny", "ec2_allow", "ec2_deny", "AccountNum"])
        root_acc = get_root_account(sts_client)
        print(root_acc)
        assumerole_iam(sts_client, writer)

def get_root_account(client):
    root_acc = client.get_caller_identity().get('Account')
    return root_acc

def assumerole_iam(sts_client, writer):
    assumed_role_object = sts_client.assume_role(RoleArn="arn:aws:iam::528150397796:role/528150397796-Devops-Admin-Role", RoleSessionName="iamautomation")
    credentials = assumed_role_object['Credentials']
    sts_clientroot1 = boto3.client('sts', aws_access_key_id=credentials['AccessKeyId'], aws_secret_access_key=credentials['SecretAccessKey'], aws_session_token=credentials['SessionToken'])
    root_acc = sts_clientroot1.get_caller_identity()
    print(root_acc)
    fname = 'roles-dev.xlsx'
    wb = openpyxl.load_workbook(fname)
    sheet = wb['Sheet1']
    for rowOfCellObjects in sheet['A95':'A95']:
        try:
            for cellObj in rowOfCellObjects:
                v1 = cellObj.value
                account_num = assume_role_get_account(sts_clientroot1, v1)
                print("Switching to", account_num)
                iam_client = boto3.client('iam', aws_access_key_id=credentials['AccessKeyId'], aws_secret_access_key=credentials['SecretAccessKey'], aws_session_token=credentials['SessionToken'])
                iam_roles(iam_client, writer, account_num)
        except ClientError as error:
            print(error)
            continue

def assume_role_get_account(sts_client, role_arn):
    assumed_role_object = sts_client.assume_role(RoleArn=role_arn, RoleSessionName="AssumeRoleSession1")
    sts_client1 = boto3.client('sts', aws_access_key_id=assumed_role_object['Credentials']['AccessKeyId'], aws_secret_access_key=assumed_role_object['Credentials']['SecretAccessKey'], aws_session_token=assumed_role_object['Credentials']['SessionToken'])
    account_num = sts_client1.get_caller_identity().get('Account')
    return account_num

def iam_roles(iam_client, writer, account_num):
    try:
        s3_perms_allow = ['s3:*', 's3:CreateBucket']
        ec2_perms_allow = ['ec2:*', 'ec2:CreateInstance', 'ec2:StartInstance']
        s3_perms_deny = ['s3:DeleteBucket']
        ec2_perms_deny = ['ec2:StopInstance', 'ec2:AttachInternetGateway', 'ec2:DetachNetworkInterface', 'iam:Create*']
        
        paginator = iam_client.get_paginator("list_roles")
        for response in paginator.paginate(PaginationConfig={'MaxItems': 1000}):
            for role in response['Roles']:
                role_name = role["RoleName"]
                attached_policies = iam_client.list_attached_role_policies(RoleName=role['RoleName'])['AttachedPolicies']
                policies_list = []
                s3_allow_list = []
                s3_deny_list = []
                ec2_allow_list = []
                ec2_deny_list = []
                
                for policy in attached_policies:
                    policy_version = iam_client.get_policy_version(PolicyArn=policy['PolicyArn'], VersionId=policy['DefaultVersionId'])['PolicyVersion']['Document']
                    process_policy_statement(policy_version, s3_perms_allow, s3_allow_list, ec2_perms_allow, ec2_allow_list, s3_perms_deny, s3_deny_list, ec2_perms_deny, ec2_deny_list)

                inline_policies = iam_client.list_role_policies(RoleName=role['RoleName'])['PolicyNames']
                for policy_name in inline_policies:
                    policy_version = iam_client.get_role_policy(RoleName=role['RoleName'], PolicyName=policy_name)['PolicyDocument']
                    process_policy_statement(policy_version, s3_perms_allow, s3_allow_list, ec2_perms_allow, ec2_allow_list, s3_perms_deny, s3_deny_list, ec2_perms_deny, ec2_deny_list)

                policies_list.append(policy_name)
                writer.writerow([role_name, ','.join(policies_list), ','.join(s3_allow_list), ','.join(s3_deny_list), ','.join(ec2_allow_list), ','.join(ec2_deny_list), account_num])
                print(role_name, "---->", policies_list, s3_allow_list, s3_deny_list, ec2_allow_list, ec2_deny_list, account_num)
    except Exception as e:
        print("Error:", e)

def process_policy_statement(policy_version, s3_perms_allow, s3_allow_list, ec2_perms_allow, ec2_allow_list, s3_perms_deny, s3_deny_list, ec2_perms_deny, ec2_deny_list):
    for idx, statement in enumerate(policy_version.get('Statement', []), start=1):
        effect = statement.get('Effect', 'N/A')
        actions = statement.get('Action', 'N/A')
        if effect == 'Allow':
            for s3_perm_allow in s3_perms_allow:
                if s3_perm_allow in actions:
                    s3_allow_list.append(s3_perm_allow)
            for ec2_perm_allow in ec2_perms_allow:
                if ec2_perm_allow in actions:
                    ec2_allow_list.append(ec2_perm_allow)
        elif effect == 'Deny':
            for s3_perm_deny in s3_perms_deny:
                if s3_perm_deny in actions:
                    s3_deny_list.append(s3_perm_deny)
            for ec2_perm_deny in ec2_perms_deny:
                if ec2_perm_deny in actions:
                    ec2_deny_list.append(ec2_perm_deny)

if __name__ == "__main__":
    main()