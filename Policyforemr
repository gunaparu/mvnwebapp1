here nothing
[Your Address]  
[City, State, Zip Code]  
[Email Address]  
[Phone Number]  
[Date]

[Manager's Name]  
[Company Name]  
[Company Address]  
[City, State, Zip Code]

Dear [Manager's Name],

I hope this message finds you well.

I am writing to inform you of my intention to take leave from [Start Date] to [End Date]. During this time, I plan to undergo Ayurvedic treatment for migraine headaches, which I believe will significantly improve my health and well-being.

I have ensured that all pending tasks and responsibilities are either completed or delegated appropriately to ensure a smooth workflow during my absence. Additionally, I will be available via email or phone for any urgent matters that may arise during my leave.

I kindly request your approval for this leave and would appreciate it if you could confirm your acceptance at your earliest convenience. If there are any forms or procedures I need to follow to formalize this request, please let me know, and I will promptly attend to them.

Thank you for your understanding and support in this matter. I am confident that this brief period of leave will allow me to return to work refreshed and ready to contribute effectively to our team.

Warm regards,

[Your Name]


Subject: Urgent Action Required: Fixing Misconfigured EC2 Security Group to Protect our AWS Environment

Dear [Recipient],

I hope this message finds you well. I am writing to bring to your attention a critical security issue that requires immediate action to safeguard our AWS environment.

We have identified a misconfiguration in one of our EC2 Security Groups that allows unrestricted access to remote administration ports (e.g., SSH - port 22, RDP - port 3389). This misconfiguration poses significant security risks, including unauthorized access, data breaches, and potential compromise of sensitive information hosted on our EC2 instances.

It is imperative that we address this issue promptly to protect our AWS environment and mitigate the potential impact on our organization. By fixing the misconfigured Security Group to restrict access to remote administration ports, we can enhance security, ensure compliance with regulatory requirements, and safeguard our critical assets from malicious attacks and unauthorized access.

Importance of Protecting our AWS Environment:

1. **Security Enhancement**: Fixing the misconfigured Security Group is essential for enhancing the security posture of our AWS environment and reducing the risk of security incidents and data breaches.

2. **Compliance Requirements**: Addressing security vulnerabilities and misconfigurations is necessary to maintain compliance with regulatory frameworks and industry standards, protecting our organization from potential penalties and legal liabilities.

3. **Data Protection**: Our AWS environment hosts sensitive data and critical applications that require protection from unauthorized access and malicious activities. Fixing the misconfigured Security Group helps safeguard sensitive information and prevent data breaches.

4. **Business Continuity**: Maintaining the availability and integrity of our AWS resources is crucial for business continuity and operational resilience. By securing remote administration ports, we ensure uninterrupted access to our applications and services.

5. **Reputation Management**: Security incidents resulting from misconfigured Security Groups can damage our organization's reputation and erode customer trust. Proactively addressing security vulnerabilities demonstrates our commitment to protecting customer data and maintaining a secure environment.

Given the importance of protecting our AWS environment and the potential consequences of security incidents, I urge you to prioritize the resolution of this issue. Please take immediate action to fix the misconfigured Security Group and implement appropriate access controls to restrict access to remote administration ports.

If you require assistance or additional resources to address this issue, please do not hesitate to reach out to the [Security Team/IT Department]. Your prompt attention to this matter is greatly appreciated.

Thank you for your cooperation and commitment to maintaining the security and integrity of our AWS environment.

Best regards,

[Your Name]
[Your Position]
[Your Contact Information]

from multiprocessing.sharedctypes import Value
import boto3
from datetime import date
import xlwings as xw
import openpyxl
import botocore
import pandas as pd
import json
from botocore.exceptions import ClientError
def main():
  sts_client = boto3.client('sts')
  assumed_role_object = sts_client.assume_role(RoleArn='arn:aws:iam::528150397796:role/IAM_Automation',RoleSessionName="iamautomation",ExternalId="UZZCWIWGSY")
  credentials=assumed_role_object['Credentials']
  client=boto3.client('sts',aws_access_key_id=credentials['AccessKeyId'],aws_secret_access_key=credentials['SecretAccessKey'],aws_session_token=credentials['SessionToken'])
  root_acc = client.get_caller_identity().get('Account')
  print(root_acc)
  assumerole_iam(client)
def assumerole_iam(client):
  assumed_role_object = client.assume_role(RoleArn="arn:aws:iam::528150397796:role/528150397796-Devops-Admin-Role",RoleSessionName="iamautomation")
  credentials=assumed_role_object['Credentials']
  iam_client=boto3.client('iam',aws_access_key_id=credentials['AccessKeyId'],aws_secret_access_key=credentials['SecretAccessKey'],aws_session_token=credentials['SessionToken'])
  sts_clientroot1=boto3.client('sts',aws_access_key_id=credentials['AccessKeyId'],aws_secret_access_key=credentials['SecretAccessKey'],aws_session_token=credentials['SessionToken'])
  root_acc = sts_clientroot1.get_caller_identity()
  print(root_acc)
  fname = 'Prodaccounts.xlsx'
  wb = openpyxl.load_workbook(fname)
  sheet = wb.get_sheet_by_name('Sheet1')
  for rowOfCellObjects in sheet['A2':'A2']:
    try:
      for cellObj in rowOfCellObjects:
        #print(cellObj.coordinate, cellObj.value)
        v1 = cellObj.value
        assumed_role_object = sts_clientroot1.assume_role(RoleArn=v1,RoleSessionName="AssumeRoleSession1")
        credentials=assumed_role_object['Credentials']
        iam_client=boto3.client('iam',aws_access_key_id=credentials['AccessKeyId'],aws_secret_access_key=credentials['SecretAccessKey'],aws_session_token=credentials['SessionToken'])
        sts_client1=boto3.client('sts',aws_access_key_id=credentials['AccessKeyId'],aws_secret_access_key=credentials['SecretAccessKey'],aws_session_token=credentials['SessionToken'])
        account_num = sts_client1.get_caller_identity().get('Account')
        #acc_name =   boto3.client('organizations').describe_account(AccountId=account_num).get('Account').get('Name') 
        additional_tags = [{'Key': 'role_type', 'Value': 'service'}]
        additional_tags1 = [{'Key': 'role_type', 'Value': 'core'}]
        f = open("issues-service.csv",'w')
        f1 = open("issues-core.csv",'w')
        print("Switching to",account_num)
        service_roles(iam_client,additional_tags,account_num,f)
        core_roles(iam_client,additional_tags1,account_num,f1)
    except botocore.exceptions.ClientError as error:
      print(error)
      continue  
def service_roles(iam_client,additional_tags,account_num,f):
  #role_names =['rds-monitoring-role','CloudabilityRole','WizAccess-Role','Okta-Idp-cross-account-role','stacksets-exec-c1c1605357571231990026442703']
  role_names =['stacksets-exec-c1c1b0535f75d712e3199a0026442703']
  cmr_role=account_num+"-cloud-management-Role"
  role_names.append(cmr_role)
  try:
    for role_name in role_names:
      response = iam_client.list_role_tags(RoleName=role_name)
      current_tags = response['Tags']
      # Add additional tags to the existing ones
      updated_tags = current_tags + additional_tags
      # Update tags for the IAM role
      iam_client.tag_role(RoleName=role_name, Tags=updated_tags)
      print(f"Additional tags added to IAM role {role_name} successfully.")
  except Exception as e:
    print(e)
    f.write(role_name+","+account_num+","+str(e)+"\n")
    pass
        
def core_roles(iam_client,additional_tags1,account_num,f1):
  try:
    role_name = account_num+"-DBE-Role"
    response = iam_client.list_role_tags(RoleName=role_name)
    current_tags = response['Tags']
    # Add additional tags to the existing ones
    updated_tags = current_tags + additional_tags1
    # Update tags for the IAM role
    iam_client.tag_role(RoleName=role_name, Tags=updated_tags)
    print(f"Additional tags added to IAM role {role_name} successfully.")
  except Exception as e:
    print(e)
    f1.write(role_name+","+account_num+","+str(e)+"\n")
    pass
if __name__ == "__main__":
    main()
