{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "config:StartRemediationExecution",
        "config:GetComplianceDetailsByConfigRule",
        "config:PutRemediationConfigurations"
      ],
      "Resource": "*"
    },
    {
      "Effect": "Allow",
      "Action": [
        "ec2:ModifyInstanceAttribute", // Modify this based on the specific remediation action
        // Add other permissions for necessary remediation actions
      ],
      "Resource": "*"
    }
  ]
}



import boto3

def get_s3_bucket_kms_encryption_status():
    # Initialize Boto3 S3 client
    s3 = boto3.client('s3')

    # Get list of S3 buckets
    buckets = s3.list_buckets()

    # Iterate through each bucket and get encryption status
    for bucket in buckets['Buckets']:
        bucket_name = bucket['Name']
        try:
            # Get bucket encryption configuration
            encryption = s3.get_bucket_encryption(Bucket=bucket_name)
            print(f"Bucket: {bucket_name} - KMS Encryption: Enabled")
        except s3.exceptions.ClientError as e:
            if e.response['Error']['Code'] == 'ServerSideEncryptionConfigurationNotFoundError':
                print(f"Bucket: {bucket_name} - KMS Encryption: Not Enabled")
            else:
                print(f"Bucket: {bucket_name} - Error: {e}")

if __name__ == "__main__":
    get_s3_bucket_kms_encryption_status()





Here's the optimized and more concise version:

---

**AWS IAM Activities and Automation**:

- **IAM Policy Design**: Created and enforced least-privilege IAM policies for secure access to AWS resources.
  
- **Role-Based Access Control (RBAC)**: Managed IAM roles, users, and permissions for services like EC2, S3, and Lambda, ensuring secure, role-specific access.

- **Automation of IAM Roles and Users**: Automated IAM user, role, and group management via AWS CloudFormation and CLI, enhancing security and operational efficiency.

- **Access Audits and Compliance**: Conducted automated audits of IAM roles and permissions, ensuring compliance through AWS Config and Lambda-based reporting.

- **Key Rotation Automation**: Implemented automated access key rotation using AWS Lambda, ensuring secure key management.

- **MFA Enforcement**: Automated the setup and enforcement of MFA for IAM users, bolstering account security.

- **S3 Policy Automation**: Automated S3 bucket policy management via CloudFormation, ensuring secure data access.

- **Cross-Account Role Setup**: Automated cross-account role creation using AWS Organizations, enabling secure, federated access across multiple accounts.

- **Role Assumption Automation**: Streamlined IAM role assumptions for AWS services with Lambda functions, reducing manual intervention.

---

This version keeps the core details while being more direct and succinct.