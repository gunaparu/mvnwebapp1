{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "DenyModificationOfDefaultSG",
            "Effect": "Deny",
            "Action": [
                "ec2:AuthorizeSecurityGroupIngress",
                "ec2:AuthorizeSecurityGroupEgress"
            ],
            "Resource": "*",
            "Condition": {
                "Bool": {
                    "ec2:IsDefault": "true"
                }
            }
        }
    ]
}


{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "DenyAddingPublicIPRange",
            "Effect": "Deny",
            "Action": [
                "ec2:AuthorizeSecurityGroupIngress",
                "ec2:AuthorizeSecurityGroupEgress"
            ],
            "Resource": "*",
            "Condition": {
                "StringEquals": {
                    "ec2:IpRanges": "0.0.0.0/0"
                }
            }
        }
    ]
}




import boto3
import csv
import openpyxl
from botocore.exceptions import ClientError
import botocore
import json

def main():
    sts_client = boto3.client('sts')
    with open("finalreport.csv", 'w', newline='') as f:
        writer = csv.writer(f)
        writer.writerow(["Role Name", "Policy Name", "S3 Allow", "S3 Deny", "ec2_allow", "ec2_deny","IAM Allow","IAM Deny","Cloudtrail Allow","Cloudtrail Deny","RDS Allow","RDS Deny","DynamoDB Allow","DynamoDB Deny","Administrator Access", "AccountNum","Role ARN","Compliance/NonCompliance"])
        root_acc = get_root_account(sts_client)
        print(root_acc)
        assumerole_iam(sts_client, writer)

def get_root_account(client):
    root_acc = client.get_caller_identity().get('Account')
    return root_acc

def assumerole_iam(sts_client, writer):
    assumed_role_object = sts_client.assume_role(RoleArn='arn:aws:iam::528150397796:role/IAM_Automation',RoleSessionName="iamautomation",ExternalId="UZZCWIWGSY")
    credentials=assumed_role_object['Credentials']
    client=boto3.client('sts',aws_access_key_id=credentials['AccessKeyId'],aws_secret_access_key=credentials['SecretAccessKey'],aws_session_token=credentials['SessionToken'])
    root_acc = client.get_caller_identity().get('Account')
    print(root_acc)
    assumed_role_object = client.assume_role(RoleArn="arn:aws:iam::528150397796:role/528150397796-Devops-Admin-Role",RoleSessionName="iamautomation")
    credentials=assumed_role_object['Credentials']
    iam_client=boto3.client('iam',aws_access_key_id=credentials['AccessKeyId'],aws_secret_access_key=credentials['SecretAccessKey'],aws_session_token=credentials['SessionToken'])
    sts_clientroot1=boto3.client('sts',aws_access_key_id=credentials['AccessKeyId'],aws_secret_access_key=credentials['SecretAccessKey'],aws_session_token=credentials['SessionToken'])
    root_acc = sts_clientroot1.get_caller_identity()
    print(root_acc)
    fname = 'roles-dev.xlsx'
    wb = openpyxl.load_workbook(fname)
    sheet = wb.get_sheet_by_name('Sheet1')
    for rowOfCellObjects in sheet['A1':'A70']:
      try:
        for cellObj in rowOfCellObjects:
          #print(cellObj.coordinate, cellObj.value)
          v1 = cellObj.value
          assumed_role_object = sts_clientroot1.assume_role(RoleArn=v1,RoleSessionName="AssumeRoleSession1")
          credentials=assumed_role_object['Credentials']
          iam_client=boto3.client('iam',aws_access_key_id=credentials['AccessKeyId'],aws_secret_access_key=credentials['SecretAccessKey'],aws_session_token=credentials['SessionToken'])
          sts_client1=boto3.client('sts',aws_access_key_id=credentials['AccessKeyId'],aws_secret_access_key=credentials['SecretAccessKey'],aws_session_token=credentials['SessionToken'])
          account_num = sts_client1.get_caller_identity().get('Account')
          #acc_name =   boto3.client('organizations').describe_account(AccountId=account_num).get('Account').get('Name')
          users = iam_client.list_users()["Users"]
          print("Switching to",account_num)
          iam_roles(iam_client,writer,account_num)
      except botocore.exceptions.ClientError as error: 
        print(error)
        continue
def iam_roles(iam_client, writer, account_num):
    try:
        # S3
        s3_perms_allow = ['s3:*',"s3:CreateBucket","s3:CreateAccessPoint","s3:CreateAccessGrant","s3:CreateAccessPointForObjectLambda","s3:DeleteBucket","s3:DeleteBucketWebsite","s3:DeleteAccessPoint","s3:DeleteAccessGrant","s3:DeleteObject","s3:Create*","s3:Delete*"]
        s3_perms_deny = ["s3:CreateBucket","s3:CreateAccessPoint","s3:CreateAccessGrant","s3:CreateAccessPointForObjectLambda","s3:DeleteBucket","s3:DeleteBucketWebsite","s3:DeleteAccessPoint","s3:DeleteAccessGrant","s3:DeleteObject","s3:Create*","s3:Delete*"]
        # EC2
        ec2_perms_allow = ['ec2:*',"ec2:CreateInternetGateway","ec2:DeleteInternetGateway","ec2:AttachInternetGateway","ec2:CreateNatGateway","ec2:DeleteNatGateway","ec2:CreateVpcPeeringConnection","ec2:CreateNetworkAcl","ec2:DeleteNetworkAcl","ec2:DisassociateNatGatewayAddress","ec2:DisassociateRouteTable","ec2:DisassociateSubnetCidrBlock","ec2:DisassociateVpcCidrBlock","ec2:AuthorizeClientVpnIngress","ec2:AcceptTransitGatewayPeeringAttachment","ec2:AcceptTransitGatewayVpcAttachment","ec2:ModifySubnetAttribute","ec2:ModifyTransitGatewayVpcAttachment","ec2:CreateSubnet","ec2:AcceptVpcPeeringConnection","ec2:DeleteVpcPeeringConnection","ec2:CreateVpc","ec2:DeleteVpc","ec2:ModifyVpcTenancy","ec2:CreateFlowLogs","ec2:DeleteFlowLogs","ec2:AttachVpnGateway","ec2:CreateVpnGateway","ec2:DeleteVpnGateway","ec2:DisableVgwRoutePropagation","ec2:EnableVgwRoutePropagation","ec2:CreateVpnConnectionRoute","ec2:DeleteVpnConnection","ec2:DeleteVpnConnectionRoute","ec2:ModifyVpnConnection","ec2:CreateCustomerGateway","ec2:DeleteCustomerGateway","ec2:CreateRouteTable","ec2:AssociateRouteTable","ec2:CreateRoute","ec2:DeleteRouteTable","ec2:ModifyVpcAttribute","ec2:ReplaceRoute","ec2:DeleteRoute","ec2:CreateTransitGateway","ec2:DeleteTransitGatewayRouteTable","ec2:CreateTransitGatewayRouteTable","ec2:ReplaceTransitGatewayRoute"]
        ec2_perms_deny = ["ec2:CreateInternetGateway","ec2:DeleteInternetGateway","ec2:AttachInternetGateway","ec2:CreateNatGateway","ec2:DeleteNatGateway","ec2:CreateVpcPeeringConnection","ec2:CreateNetworkAcl","ec2:DeleteNetworkAcl","ec2:DisassociateNatGatewayAddress","ec2:DisassociateRouteTable","ec2:DisassociateSubnetCidrBlock","ec2:DisassociateVpcCidrBlock","ec2:AuthorizeClientVpnIngress","ec2:AcceptTransitGatewayPeeringAttachment","ec2:AcceptTransitGatewayVpcAttachment","ec2:ModifySubnetAttribute","ec2:ModifyTransitGatewayVpcAttachment","ec2:CreateSubnet","ec2:AcceptVpcPeeringConnection","ec2:DeleteVpcPeeringConnection","ec2:CreateVpc","ec2:DeleteVpc","ec2:ModifyVpcTenancy","ec2:CreateFlowLogs","ec2:DeleteFlowLogs","ec2:AttachVpnGateway","ec2:CreateVpnGateway","ec2:DeleteVpnGateway","ec2:DisableVgwRoutePropagation","ec2:EnableVgwRoutePropagation","ec2:CreateVpnConnectionRoute","ec2:DeleteVpnConnection","ec2:DeleteVpnConnectionRoute","ec2:ModifyVpnConnection","ec2:CreateCustomerGateway","ec2:DeleteCustomerGateway","ec2:CreateRouteTable","ec2:AssociateRouteTable","ec2:CreateRoute","ec2:DeleteRouteTable","ec2:ModifyVpcAttribute","ec2:ReplaceRoute","ec2:DeleteRoute","ec2:CreateTransitGateway","ec2:DeleteTransitGatewayRouteTable","ec2:CreateTransitGatewayRouteTable","ec2:ReplaceTransitGatewayRoute"]
        #IAM
        iam_perms_allow = ['iam:*',"iam:CreateAccessKey","iam:CreateRole","iam:CreateUser","iam:DeleteAccessKey","iam:DeleteGroup","iam:DeleteRole","iam:DeleteUser"]
        iam_perms_deny = ["iam:CreateUser","iam:DeleteUser","iam:UpdateUser","iam:CreateRole","iam:DeleteRole","iam:PassRole","iam:UpdateRole"]
        # Cloudtrail
        cloudtrail_perms_allow =["cloudtrail:*","cloudtrail:CreateTrail","cloudtrail:DeleteTrail","cloudtrail:UpdateTrail"]
        cloudtrail_perms_deny = ["cloudtrail:CreateTrail","cloudtrail:DeleteTrail","cloudtrail:UpdateTrail"]
        # RDS
        rds_perms_allow = ['rds:*',"rds:CreateDBInstance","rds:CreateDBClusterSnapshot","rds:CreateDBCluster","rds:CreateDBSecurityGroup","rds:DeleteDBCluster","rds:DeleteDBInstance","rds:DeleteDBSecurityGroup","elasticfilesystem:Create*","elasticfilesystem:Delete*"]
        rds_perms_deny = ["rds:CreateDBInstance","rds:CreateDBClusterSnapshot","rds:CreateDBCluster","rds:CreateDBSecurityGroup","rds:DeleteDBCluster","rds:DeleteDBInstance","rds:DeleteDBSecurityGroup","elasticfilesystem:Create*","elasticfilesystem:Delete*"]
        # DynamoDB
        dynamodb_perms_allow = ['dynamodb:*',"dynamodb:CreateBackup","dynamodb:CreateGlobalTable","dynamodb:CreateTable","dynamodb:CreateTableReplica","dynamodb:DeleteBackup","dynamodb:DeleteItem","dynamodb:DeleteTable","dynamodb:DeleteTableReplica","dynamodb:DeleteResourcePolicy","dynamodb:PartiQLDelete","dynamodb:Create*","dynamodb:Delete*"]
        dynamodb_perms_deny = ["dynamodb:CreateBackup","dynamodb:CreateGlobalTable","dynamodb:CreateTable","dynamodb:CreateTableReplica","dynamodb:DeleteBackup","dynamodb:DeleteItem","dynamodb:DeleteTable","dynamodb:DeleteTableReplica","dynamodb:DeleteResourcePolicy","dynamodb:PartiQLDelete","dynamodb:Create*","dynamodb:Delete*"]
        # Admin
        admin_access = ['*']
        role_names =['rds-monitoring-role','CloudabilityRole','WizAccess-Role','Okta-Idp-cross-account-role','stacksets-exec-c1c1b0535f75d712e3199a0026442703','CloudWatch-CrossAccountSharingRole']
        CMRrole=account_num+"-cloud-management-Role"
        role_names.append(CMRrole)
        Devopsrole = account_num+"-Devops-Admin-Role"
        role_names.append(Devopsrole)
        Readonlyrole = account_num+"-Readonly-Admin-Role"
        role_names.append(Readonlyrole)
        Financialrole = account_num+"-Financial-Analyst-Role"
        role_names.append(Financialrole)
        DBErole = account_num+"-DBE-Role"
        role_names.append(DBErole)
        #print(role_names)
        okta ="Okta"
        AppCore = "AppCore"
        Application = "Application"
        AWSServiceroles="AWSServiceRoleFor"
        paginator = iam_client.get_paginator("list_roles")
        for response in paginator.paginate(PaginationConfig={'MaxItems': 1000}):
            for role in response['Roles']:
                role_name = role["RoleName"]
                assume_doc = role['AssumeRolePolicyDocument']
                assume_string = json.dumps(assume_doc)
                if okta in assume_string:
                  if role_name in role_names:
                    print("Role is core/service",role_name)
                  else:
                    role_arn = role['Arn']
                    attached_policies = iam_client.list_attached_role_policies(RoleName=role['RoleName'])['AttachedPolicies']
                    policies_list = []
                    s3_allow_list = []
                    s3_deny_list = []
                    ec2_allow_list = []
                    ec2_deny_list = []
                    iam_allow_list = []
                    iam_deny_list = []
                    cloudtrail_allow_list = []
                    cloudtrail_deny_list = []
                    rds_allow_list = []
                    rds_deny_list = []
                    dynamodb_allow_list = []
                    dynamodb_deny_list = []
                    admin_list = []
                    compliance = " Compliance Role"
                    noncompliance = "NonCompliance Role"

                    for policy in attached_policies:
                        #policy_version = iam_client.get_policy_version(PolicyArn=policy['PolicyArn'], VersionId=policy['DefaultVersionId'])['PolicyVersion']['Document']
                        policy_document = iam_client.get_policy(PolicyArn=policy['PolicyArn'])['Policy']['DefaultVersionId']
                        #print(policy)
                        policy_version = iam_client.get_policy_version(PolicyArn=policy['PolicyArn'],VersionId=policy_document)['PolicyVersion']['Document']
                        process_policy_statement(policy_version, s3_perms_allow, s3_allow_list, s3_perms_deny, s3_deny_list, ec2_perms_allow, ec2_allow_list, ec2_perms_deny, ec2_deny_list,iam_perms_allow,iam_allow_list, iam_perms_deny, iam_deny_list, cloudtrail_perms_allow, cloudtrail_allow_list, cloudtrail_perms_deny, cloudtrail_deny_list, rds_perms_allow, rds_allow_list, rds_perms_deny, rds_deny_list, dynamodb_perms_allow, dynamodb_allow_list, dynamodb_perms_deny, dynamodb_deny_list, admin_access, admin_list)
                        policies_list.append(policy['PolicyName'])
                        if policy['PolicyName'] == 'AdministratorAccess':
                          admin_list.append("admin_access")

                    inline_policies = iam_client.list_role_policies(RoleName=role['RoleName'])['PolicyNames']
                    for policy_name in inline_policies:
                        policy_version = iam_client.get_role_policy(RoleName=role['RoleName'], PolicyName=policy_name)['PolicyDocument']
                        process_policy_statement(policy_version, s3_perms_allow, s3_allow_list, s3_perms_deny, s3_deny_list, ec2_perms_allow, ec2_allow_list, ec2_perms_deny, ec2_deny_list,iam_perms_allow,iam_allow_list, iam_perms_deny, iam_deny_list, cloudtrail_perms_allow, cloudtrail_allow_list, cloudtrail_perms_deny, cloudtrail_deny_list, rds_perms_allow, rds_allow_list, rds_perms_deny, rds_deny_list, dynamodb_perms_allow, dynamodb_allow_list, dynamodb_perms_deny, dynamodb_deny_list, admin_access, admin_list)
                        policies_list.append(policy_name)
                    total_allow = s3_allow_list + ec2_allow_list + iam_allow_list + cloudtrail_allow_list + rds_allow_list + dynamodb_allow_list + admin_list

                    if (s3_allow_list and not s3_deny_list) or (ec2_allow_list and not ec2_deny_list) or (iam_allow_list and not iam_deny_list) or (cloudtrail_allow_list and not cloudtrail_deny_list) or (rds_allow_list and not rds_deny_list) or (dynamodb_allow_list and not dynamodb_deny_list) or admin_list:
                      writer.writerow([role_name, ','.join(map(str,policies_list)), ','.join(map(str,set(s3_allow_list))), ','.join(map(str,set(s3_deny_list))), ','.join(map(str,set(ec2_allow_list))), ','.join(map(str,set(ec2_deny_list))),','.join(map(str,set(iam_allow_list))),','.join(map(str,set(iam_deny_list))),','.join(map(str,set(cloudtrail_allow_list))), ','.join(map(str,set(cloudtrail_deny_list))), ','.join(map(str,set(rds_allow_list))), ','.join(map(str,set(rds_deny_list))),','.join(map(str,set(dynamodb_allow_list))), ','.join(map(str,set(dynamodb_deny_list))),','.join(map(str,set(admin_list))), account_num,role_arn,AppCore, noncompliance])
                      print(role_name, f"{AppCore}noncompliance ---->", policies_list, s3_allow_list, s3_deny_list, ec2_allow_list, ec2_deny_list, admin_list, account_num)

                    else:
                      writer.writerow([role_name, ','.join(map(str,policies_list)), ','.join(map(str,set(s3_allow_list))), ','.join(map(str,set(s3_deny_list))), ','.join(map(str,set(ec2_allow_list))), ','.join(map(str,set(ec2_deny_list))),','.join(map(str,set(iam_allow_list))),','.join(map(str,set(iam_deny_list))),','.join(map(str,set(cloudtrail_allow_list))), ','.join(map(str,set(cloudtrail_deny_list))), ','.join(map(str,set(rds_allow_list))), ','.join(map(str,set(rds_deny_list))),','.join(map(str,set(dynamodb_allow_list))), ','.join(map(str,set(dynamodb_deny_list))),','.join(map(str,set(admin_list))), account_num,role_arn, AppCore, compliance])
                      print(role_name, f"{AppCore}compliance ---->", policies_list, s3_allow_list, s3_deny_list, ec2_allow_list, ec2_deny_list, admin_list, account_num)
                elif AWSServiceroles in role_name:
                    if role_name in role_names:
                        print("Role is core/service",role_name)
                    else:
                        role_arn = role['Arn']
                        attached_policies = iam_client.list_attached_role_policies(RoleName=role['RoleName'])['AttachedPolicies']
                        policies_list = []
                        s3_allow_list = []
                        s3_deny_list = []
                        ec2_allow_list = []
                        ec2_deny_list = []
                        iam_allow_list = []
                        iam_deny_list = []
                        cloudtrail_allow_list = []
                        cloudtrail_deny_list = []
                        rds_allow_list = []
                        rds_deny_list = []
                        dynamodb_allow_list = []
                        dynamodb_deny_list = []
                        admin_list = []
                        compliance = " Compliance Role"
                        noncompliance = "NonCompliance Role"

                        for policy in attached_policies:
                            #policy_version = iam_client.get_policy_version(PolicyArn=policy['PolicyArn'], VersionId=policy['DefaultVersionId'])['PolicyVersion']['Document']
                            policy_document = iam_client.get_policy(PolicyArn=policy['PolicyArn'])['Policy']['DefaultVersionId']
                            #print(policy)
                            policy_version = iam_client.get_policy_version(PolicyArn=policy['PolicyArn'],VersionId=policy_document)['PolicyVersion']['Document']
                            process_policy_statement(policy_version, s3_perms_allow, s3_allow_list, s3_perms_deny, s3_deny_list, ec2_perms_allow, ec2_allow_list, ec2_perms_deny, ec2_deny_list,iam_perms_allow,iam_allow_list, iam_perms_deny, iam_deny_list, cloudtrail_perms_allow, cloudtrail_allow_list, cloudtrail_perms_deny, cloudtrail_deny_list, rds_perms_allow, rds_allow_list, rds_perms_deny, rds_deny_list, dynamodb_perms_allow, dynamodb_allow_list, dynamodb_perms_deny, dynamodb_deny_list, admin_access, admin_list)
                            policies_list.append(policy['PolicyName'])
                            if policy['PolicyName'] == 'AdministratorAccess':
                                admin_list.append("admin_access")

                        inline_policies = iam_client.list_role_policies(RoleName=role['RoleName'])['PolicyNames']
                        for policy_name in inline_policies:
                            policy_version = iam_client.get_role_policy(RoleName=role['RoleName'], PolicyName=policy_name)['PolicyDocument']
                            process_policy_statement(policy_version, s3_perms_allow, s3_allow_list, s3_perms_deny, s3_deny_list, ec2_perms_allow, ec2_allow_list, ec2_perms_deny, ec2_deny_list,iam_perms_allow,iam_allow_list, iam_perms_deny, iam_deny_list, cloudtrail_perms_allow, cloudtrail_allow_list, cloudtrail_perms_deny, cloudtrail_deny_list, rds_perms_allow, rds_allow_list, rds_perms_deny, rds_deny_list, dynamodb_perms_allow, dynamodb_allow_list, dynamodb_perms_deny, dynamodb_deny_list, admin_access, admin_list)
                            policies_list.append(policy_name)
                        total_allow = s3_allow_list + ec2_allow_list + iam_allow_list + cloudtrail_allow_list + rds_allow_list + dynamodb_allow_list + admin_list

                        if (s3_allow_list and not s3_deny_list) or (ec2_allow_list and not ec2_deny_list) or (iam_allow_list and not iam_deny_list) or (cloudtrail_allow_list and not cloudtrail_deny_list) or (rds_allow_list and not rds_deny_list) or (dynamodb_allow_list and not dynamodb_deny_list) or admin_list:
                            writer.writerow([role_name, ','.join(map(str,policies_list)), ','.join(map(str,set(s3_allow_list))), ','.join(map(str,set(s3_deny_list))), ','.join(map(str,set(ec2_allow_list))), ','.join(map(str,set(ec2_deny_list))),','.join(map(str,set(iam_allow_list))),','.join(map(str,set(iam_deny_list))),','.join(map(str,set(cloudtrail_allow_list))), ','.join(map(str,set(cloudtrail_deny_list))), ','.join(map(str,set(rds_allow_list))), ','.join(map(str,set(rds_deny_list))),','.join(map(str,set(dynamodb_allow_list))), ','.join(map(str,set(dynamodb_deny_list))),','.join(map(str,set(admin_list))), account_num,role_arn, AWSServiceroles, noncompliance])
                            print(role_name, f"{AWSServiceroles}noncompliance ---->", policies_list, s3_allow_list, s3_deny_list, ec2_allow_list, ec2_deny_list, admin_list, account_num)

                        else:
                            writer.writerow([role_name, ','.join(map(str,policies_list)), ','.join(map(str,set(s3_allow_list))), ','.join(map(str,set(s3_deny_list))), ','.join(map(str,set(ec2_allow_list))), ','.join(map(str,set(ec2_deny_list))),','.join(map(str,set(iam_allow_list))),','.join(map(str,set(iam_deny_list))),','.join(map(str,set(cloudtrail_allow_list))), ','.join(map(str,set(cloudtrail_deny_list))), ','.join(map(str,set(rds_allow_list))), ','.join(map(str,set(rds_deny_list))),','.join(map(str,set(dynamodb_allow_list))), ','.join(map(str,set(dynamodb_deny_list))),','.join(map(str,set(admin_list))), account_num,role_arn, AWSServiceroles,compliance])
                            print(role_name, f"{AWSServiceroles}compliance ---->", policies_list, s3_allow_list, s3_deny_list, ec2_allow_list, ec2_deny_list, admin_list, account_num)
                else:
                    if role_name in role_names:
                        print("Role is core/service",role_name)
                    else:
                        role_arn = role['Arn']
                        attached_policies = iam_client.list_attached_role_policies(RoleName=role['RoleName'])['AttachedPolicies']
                        policies_list = []
                        s3_allow_list = []
                        s3_deny_list = []
                        ec2_allow_list = []
                        ec2_deny_list = []
                        iam_allow_list = []
                        iam_deny_list = []
                        cloudtrail_allow_list = []
                        cloudtrail_deny_list = []
                        rds_allow_list = []
                        rds_deny_list = []
                        dynamodb_allow_list = []
                        dynamodb_deny_list = []
                        admin_list = []
                        compliance = " Compliance Role"
                        noncompliance = "NonCompliance Role"

                        for policy in attached_policies:
                            #policy_version = iam_client.get_policy_version(PolicyArn=policy['PolicyArn'], VersionId=policy['DefaultVersionId'])['PolicyVersion']['Document']
                            policy_document = iam_client.get_policy(PolicyArn=policy['PolicyArn'])['Policy']['DefaultVersionId']
                            #print(policy)
                            policy_version = iam_client.get_policy_version(PolicyArn=policy['PolicyArn'],VersionId=policy_document)['PolicyVersion']['Document']
                            process_policy_statement(policy_version, s3_perms_allow, s3_allow_list, s3_perms_deny, s3_deny_list, ec2_perms_allow, ec2_allow_list, ec2_perms_deny, ec2_deny_list,iam_perms_allow,iam_allow_list, iam_perms_deny, iam_deny_list, cloudtrail_perms_allow, cloudtrail_allow_list, cloudtrail_perms_deny, cloudtrail_deny_list, rds_perms_allow, rds_allow_list, rds_perms_deny, rds_deny_list, dynamodb_perms_allow, dynamodb_allow_list, dynamodb_perms_deny, dynamodb_deny_list, admin_access, admin_list)
                            policies_list.append(policy['PolicyName'])
                            if policy['PolicyName'] == 'AdministratorAccess':
                                admin_list.append("admin_access")

                        inline_policies = iam_client.list_role_policies(RoleName=role['RoleName'])['PolicyNames']
                        for policy_name in inline_policies:
                            policy_version = iam_client.get_role_policy(RoleName=role['RoleName'], PolicyName=policy_name)['PolicyDocument']
                            process_policy_statement(policy_version, s3_perms_allow, s3_allow_list, s3_perms_deny, s3_deny_list, ec2_perms_allow, ec2_allow_list, ec2_perms_deny, ec2_deny_list,iam_perms_allow,iam_allow_list, iam_perms_deny, iam_deny_list, cloudtrail_perms_allow, cloudtrail_allow_list, cloudtrail_perms_deny, cloudtrail_deny_list, rds_perms_allow, rds_allow_list, rds_perms_deny, rds_deny_list, dynamodb_perms_allow, dynamodb_allow_list, dynamodb_perms_deny, dynamodb_deny_list, admin_access, admin_list)
                            policies_list.append(policy_name)
                        total_allow = s3_allow_list + ec2_allow_list + iam_allow_list + cloudtrail_allow_list + rds_allow_list + dynamodb_allow_list + admin_list

                        if (s3_allow_list and not s3_deny_list) or (ec2_allow_list and not ec2_deny_list) or (iam_allow_list and not iam_deny_list) or (cloudtrail_allow_list and not cloudtrail_deny_list) or (rds_allow_list and not rds_deny_list) or (dynamodb_allow_list and not dynamodb_deny_list) or admin_list:
                            writer.writerow([role_name, ','.join(map(str,policies_list)), ','.join(map(str,set(s3_allow_list))), ','.join(map(str,set(s3_deny_list))), ','.join(map(str,set(ec2_allow_list))), ','.join(map(str,set(ec2_deny_list))),','.join(map(str,set(iam_allow_list))),','.join(map(str,set(iam_deny_list))),','.join(map(str,set(cloudtrail_allow_list))), ','.join(map(str,set(cloudtrail_deny_list))), ','.join(map(str,set(rds_allow_list))), ','.join(map(str,set(rds_deny_list))),','.join(map(str,set(dynamodb_allow_list))), ','.join(map(str,set(dynamodb_deny_list))),','.join(map(str,set(admin_list))), account_num,role_arn,Application, noncompliance])
                            print(role_name, f"{Application}noncompliance ---->", policies_list, s3_allow_list, s3_deny_list, ec2_allow_list, ec2_deny_list, admin_list, account_num)

                        else:
                            writer.writerow([role_name, ','.join(map(str,policies_list)), ','.join(map(str,set(s3_allow_list))), ','.join(map(str,set(s3_deny_list))), ','.join(map(str,set(ec2_allow_list))), ','.join(map(str,set(ec2_deny_list))),','.join(map(str,set(iam_allow_list))),','.join(map(str,set(iam_deny_list))),','.join(map(str,set(cloudtrail_allow_list))), ','.join(map(str,set(cloudtrail_deny_list))), ','.join(map(str,set(rds_allow_list))), ','.join(map(str,set(rds_deny_list))),','.join(map(str,set(dynamodb_allow_list))), ','.join(map(str,set(dynamodb_deny_list))),','.join(map(str,set(admin_list))), account_num,role_arn,Application, compliance])
                            print(role_name, f"{Application}compliance ---->", policies_list, s3_allow_list, s3_deny_list, ec2_allow_list, ec2_deny_list, admin_list, account_num)
    except Exception as e:
        print("Error:", e)

def process_policy_statement(policy_version, s3_perms_allow, s3_allow_list, s3_perms_deny, s3_deny_list, ec2_perms_allow, ec2_allow_list, ec2_perms_deny, ec2_deny_list,iam_perms_allow,iam_allow_list, iam_perms_deny, iam_deny_list, cloudtrail_perms_allow, cloudtrail_allow_list, cloudtrail_perms_deny, cloudtrail_deny_list, rds_perms_allow, rds_allow_list, rds_perms_deny, rds_deny_list, dynamodb_perms_allow, dynamodb_allow_list, dynamodb_perms_deny, dynamodb_deny_list, admin_access, admin_list):
    try:
      for idx, statement in enumerate(policy_version.get('Statement', []), start=1):
        effect = statement.get('Effect', 'N/A')
        actions = statement.get('Action', 'N/A')
        resources = statement.get('Resource', 'N/A')
        conditions = statement.get('Condition', 'N/A')
        #print(conditions)
        if resources.count("*") == 1 and conditions =='N/A':
            if effect == 'Allow':
                for s3_perm_allow in s3_perms_allow:
                    if s3_perm_allow in actions:
                        s3_allow_list.append(s3_perm_allow)
                for ec2_perm_allow in ec2_perms_allow:
                    if ec2_perm_allow in actions:
                        ec2_allow_list.append(ec2_perm_allow)
                for iam_perm_allow in iam_perms_allow:
                    if iam_perm_allow in actions:
                        iam_allow_list.append(iam_perm_allow)
                for cloudtrail_perm_allow in cloudtrail_perms_allow:
                    if cloudtrail_perm_allow in actions:
                        cloudtrail_allow_list.append(cloudtrail_perm_allow)
                for rds_perm_allow in rds_perms_allow:
                    if rds_perm_allow in actions:
                        rds_allow_list.append(rds_perm_allow)
                for dynamodb_perm_allow in dynamodb_perms_allow:
                    if dynamodb_perm_allow in actions:
                        dynamodb_allow_list.append(dynamodb_perm_allow)
                
            elif effect == 'Deny':
                for s3_perm_deny in s3_perms_deny:
                    if s3_perm_deny in actions:
                        s3_deny_list.append(s3_perm_deny)
                for ec2_perm_deny in ec2_perms_deny:
                    if ec2_perm_deny in actions:
                        ec2_deny_list.append(ec2_perm_deny)
                for iam_perm_deny in iam_perms_deny:
                    if iam_perm_deny in actions:
                        iam_deny_list.append(iam_perm_deny)
                for cloudtrail_perm_deny in cloudtrail_perms_deny:
                    if cloudtrail_perm_deny in actions:
                        cloudtrail_deny_list.append(cloudtrail_perm_deny)
                for rds_perm_deny in rds_perms_deny:
                    if rds_perm_deny in actions:
                        rds_deny_list.append(rds_perm_deny)
                for dynamodb_perm_deny in dynamodb_perms_deny:
                    if dynamodb_perm_deny in actions:
                        dynamodb_deny_list.append(dynamodb_perm_deny)
            
    except Exception as e1:
      print(e1)
      pass
if __name__ == "__main__":
    main()
