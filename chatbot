Slide 1: CloudGuardian — Introduction

What to Say:

	“Hey everyone, we’re excited to present CloudGuardian — an AI-powered solution designed to help security teams detect, analyze, and respond to threats in AWS environments faster and smarter.
In today’s dynamic cloud setups, security can’t rely on manual analysis or slow detection — so we built CloudGuardian to change that.”

⸻

Slide 2: Problem Statement

What to Say:

	“As a security team, we face millions of CloudTrail log entries daily. Manually analyzing these is time-consuming and error-prone.
The bigger issue? Critical threats often hide among benign logs, delaying detection and response.
Also, we use many AWS services — EC2, S3, RDS — but monitoring them in isolation means coordinated attacks could slip through unnoticed.
Finally, the lack of real-time, automated analysis makes it harder to act fast when something goes wrong.”

⸻

Slide 3: CloudGuardian Architecture

What to Say:

	“CloudGuardian addresses all these challenges with an AI-driven, automated, and scalable approach.
It continuously monitors CloudTrail logs and uses Bedrock’s Claude 3.5 model to score risks automatically.
If it detects abnormal patterns, like an unusual spike in API calls from an unknown IP, it flags them instantly.
High-risk events trigger real-time alerts via SNS, and all findings are stored in DynamoDB for audit and compliance.
It’s fully serverless — built on AWS Lambda, EventBridge, Bedrock, and QuickSight for a seamless, scalable experience.”

⸻

Slide 4: Solution – CloudGuardian

What to Say:

	“To sum it up, CloudGuardian automates threat detection using AI, ensures real-time alerts, scales effortlessly thanks to its serverless design, and stores every action for audits and compliance.
It’s designed to reduce manual effort, prioritize threats smartly, and speed up response time.”

⸻

Slide 5: Key Benefits

What to Say:

	“So, what do we gain?

	•	Speed: From detection to response, everything is automated and immediate.
	•	Focus: AI helps us focus only on the most critical risks.
	•	Scalability: It runs across multiple AWS accounts without extra effort.
	•	Audit-ready: Every action is logged for transparency and compliance.
CloudGuardian doesn’t just detect — it helps us act, at scale.”


CloudGuardian automates threat detection using AI, which means we no longer have to sift through millions of log entries manually. Instead, logs are automatically analyzed using Claude 3.5 from AWS Bedrock, which assigns a risk score based on context — like who did what, when, and whether it’s unusual behavior.

Then comes real-time alerting. If something critical is detected — say an unauthorized access to a sensitive S3 bucket — CloudGuardian immediately sends an alert via AWS SNS, so the security team can act right away, not hours later.

Because it’s built entirely using serverless AWS services like Lambda, EventBridge, and DynamoDB, it scales effortlessly across multiple AWS accounts — no matter how large or complex the environment.

Another key part is audit and compliance. Every decision CloudGuardian makes — whether it’s flagging a threat, scoring it, or triggering a response — is logged and stored, helping teams with post-incident analysis and audit readiness.

Ultimately, it’s designed to reduce manual effort, prioritize threats intelligently, and shrink response time from hours to seconds — enabling teams to stay ahead of potential breaches.”

Now let’s talk about the real-world benefits CloudGuardian delivers — the kind of value that goes beyond just technology.

⸻

Speed

	First and foremost — speed.
In cloud security, time is everything. The faster we detect and respond to threats, the better we can contain or prevent damage.
With CloudGuardian, everything — from threat detection to alerting and response — is automated and near-instant. No delays, no bottlenecks.

⸻

Focus

	Then comes focus.
When you have millions of logs, it’s easy to get overwhelmed. CloudGuardian uses AI-driven threat scoring to cut through the noise and highlight only the critical risks.
This means our teams spend time where it matters — on real threats, not chasing false positives.

⸻

Scalability

	Scalability is another big win.
CloudGuardian is built entirely on serverless AWS services, so it naturally scales across multiple AWS accounts and regions — without needing extra infrastructure or maintenance. Whether we’re monitoring 10 accounts or 110, it adapts seamlessly.

⸻

Audit-Ready

	Finally, it’s audit-ready.
Every action CloudGuardian takes — whether it’s flagging an event, sending an alert, or triggering a remediation — is logged and stored in DynamoDB. This ensures full transparency and compliance support, which is crucial for regulated environments.

⸻

	So, CloudGuardian doesn’t just help us detect — it helps us act, at scale, with speed and clarity.
That’s a game-changer in cloud security.”

CloudGuardian is designed with reusability at its core.
Its modular, serverless architecture enables easy deployment across multiple AWS accounts and environments, without major reconfiguration.

All core components — including Lambda functions, AI-driven risk scoring (Bedrock Claude), data storage (DynamoDB), dashboards (QuickSight), and EventBridge workflows — can be packaged and reused by other teams needing cloud security monitoring.

Because it’s built entirely using AWS-native services, CloudGuardian can be integrated with any AWS setup — making it adaptable for different use cases like compliance auditing, security posture management, or automated remediation.

Additionally, the AI and risk scoring logic is customizable, allowing teams to tailor it to their own threat models, while the visual dashboards provide a plug-and-play solution for real-time security insights.


To build CloudGuardian efficiently, we reused several AWS-native services and tools that allowed us to focus on innovation and automation.
	•	We used AWS Bedrock’s Claude 3.5 Sonnet model for AI-powered risk scoring and threat classification. Leveraging Bedrock helped us avoid building custom models while still enabling accurate, context-aware threat analysis.
(Reference: AWS Bedrock)
	•	For automation, we reused AWS Lambda function templates for scheduled log processing and S3 event triggers. This made it easy to set up serverless workflows for continuous monitoring.
(Reference: AWS Serverless Examples)
	•	We worked with the standard CloudTrail log format for parsing security events, which ensured compatibility across all AWS services without needing custom data ingestion logic.
	•	We also reused existing Boto3 SDK scripts to interact with key services like S3, DynamoDB, SNS, and EventBridge, which sped up development and ensured consistent integration.
(Reference: Boto3 Docs)

In addition, we followed best practices from the AWS Well-Architected Framework to ensure our solution was secure, reliable, and scalable.

CloudGuardian is designed with modularity and scalability in mind, making it easy for other teams or projects to adopt and extend. Key components like the Lambda functions, AI risk scoring logic using Bedrock Claude, and EventBridge-based automation workflows can be reused across different AWS environments with minimal adjustments.

Security teams can quickly adapt CloudGuardian by:
	•	Plugging it into their own CloudTrail logs stored in S3
	•	Reusing the AI scoring logic to classify security events in their context
	•	Leveraging the serverless framework to scale across multiple AWS accounts
	•	Extending the automation layer to add custom remediation actions
	•	Integrating it with their own alerting tools via SNS or EventBridge

Because it’s built entirely on AWS-native services, CloudGuardian can be reused without needing third-party tools, making it ideal for teams looking to enhance their cloud security posture with minimal setup.

Hi Ramesh,

I have gathered the required information as per our previous discussion regarding the FSD Cyera integration. We also had an internal discussion to identify the accounts to be onboarded in Phase 1. Below is the list of accounts selected for onboarding to the Cyera SaaS model:

List of Accounts:
[Insert Table/List Here]

These accounts were selected based on our earlier conversation, with a focus on Non-Predicted Internal and Restricted accounts. Notably, two Production accounts are included in the list:
	1.	Lgbs-Connect-PublicEdge-Prod – We aim to verify if any sensitive data exists in this account, as it operates in a public-facing environment.
	2.	Lgbs-Account-Review-Self-Service-… – Although this is considered a UAT environment, we would like to check for any discrepancies against our security guidelines.

Additionally, we would like to confirm with you if the following accounts can also be onboarded:
	•	Lgbs-Pinning-NonPred
	•	Lgbs-Sunrise-DEV

Please share your suggestions or comments regarding the selected accounts for Phase 1 onboarding.

Regards,
T Gunasekhar

