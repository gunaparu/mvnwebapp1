{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "DenyModificationOfDefaultSG",
            "Effect": "Deny",
            "Action": [
                "ec2:AuthorizeSecurityGroupIngress",
                "ec2:AuthorizeSecurityGroupEgress"
            ],
            "Resource": "*",
            "Condition": {
                "Bool": {
                    "ec2:IsDefault": "true"
                }
            }
        }
    ]
}


{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "DenyAddingPublicIPRange",
            "Effect": "Deny",
            "Action": [
                "ec2:AuthorizeSecurityGroupIngress",
                "ec2:AuthorizeSecurityGroupEgress"
            ],
            "Resource": "*",
            "Condition": {
                "StringEquals": {
                    "ec2:IpRanges": "0.0.0.0/0"
                }
            }
        }
    ]
}



import boto3
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.image import MIMEImage

# Initialize boto3 client
ses = boto3.client('ses', region_name='us-west-2')

# Define sender and recipient
SENDER = "Sender Name <sender@example.com>"
RECIPIENT = "recipient@example.com"
SUBJECT = "CIS AWS IAM Roles Rationalization – NIL Usage Roles Clean-up"

# Define the HTML content
HTML_BODY = """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Email Example</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        .container {
            border: 1px solid #ddd;
            padding: 20px;
        }
        .header {
            display: flex;
            align-items: center;
        }
        .header img {
            max-height: 50px;
            margin-right: 20px;
        }
        .content {
            margin-top: 20px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <img src="cid:logo_cis" alt="CIS">
            <img src="cid:logo_experian" alt="Experian">
        </div>
        <h1>CIS AWS IAM Roles Rationalization – NIL Usage Roles Clean-up</h1>
        <h2>What is happening?</h2>
        <p>The CIS DevSecOps team is working with CIS Ascend Platform team to clean up all CIS AWS IAM roles that were not used in the last 6 months.</p>
        <h2>Why is this relevant to you?</h2>
        <p>You're the owner of the AWS account(s) and/or IAM Roles for one or more AWS accounts.</p>
        <h2>What is in scope?</h2>
        <p>List of IAM Roles with NIL usage: <a href="https://example.com/link/to/Roles-NIL-Usage.xlsx">Roles - NIL Usage.xlsx</a></p>
        <h2>What will happen?</h2>
        <ul>
            <li>The IAM roles in the above shared report will be deleted from the respective AWS accounts by June 07, 2023.</li>
            <li>If you want to retain any role, please let us know by June 02, 2023.</li>
            <li>If you fail to respond to this notification, we consider it as approval to proceed and delete IAM Roles in your account.</li>
            <li>If you need any of those roles afterwards, you must create them afresh as new with security guidelines recommended & consider the ETAs accordingly.</li>
        </ul>
        <h2>Who should I contact for any queries on Roles Audit/Consolidation effort?</h2>
        <p>For more details, please visit <a href="https://pages.experian.com/x/t7N2Q">this link</a>. For further queries, please reach out to <a href="mailto:CIS-DevSecOps@experian.com">CIS-DevSecOps@experian.com</a> or <a href="mailto:PE-SRE@experian.com">PE-SRE@experian.com</a>.</p>
        <p>Created by CIS DevSecOps Team</p>
    </div>
</body>
</html>
"""

# Define the plain text content
BODY_TEXT = ("CIS AWS IAM Roles Rationalization - NIL Usage Roles Clean-up\r\n"
             "The CIS DevSecOps team is working with CIS Ascend Platform team to clean up all CIS AWS IAM roles that were not used in the last 6 months.\r\n")

# Create a multipart/mixed parent container
msg = MIMEMultipart('mixed')
msg['Subject'] = SUBJECT
msg['From'] = SENDER
msg['To'] = RECIPIENT

# Create a multipart/alternative child container
msg_body = MIMEMultipart('alternative')

# Encode the text and HTML content and set the character encoding
textpart = MIMEText(BODY_TEXT, 'plain', 'utf-8')
htmlpart = MIMEText(HTML_BODY, 'html', 'utf-8')

# Add the text and HTML parts to the child container
msg_body.attach(textpart)
msg_body.attach(htmlpart)

# Attach the multipart/alternative child container to the multipart/mixed parent container
msg.attach(msg_body)

# Load images and attach them to the message
with open("path/to/logo_cis.png", 'rb') as img:
    mime_image = MIMEImage(img.read())
    mime_image.add_header('Content-ID', '<logo_cis>')
    msg.attach(mime_image)

with open("path/to/logo_experian.png", 'rb') as img:
    mime_image = MIMEImage(img.read())
    mime_image.add_header('Content-ID', '<logo_experian>')
    msg.attach(mime_image)

# Send the email
try:
    response = ses.send_raw_email(
        Source=SENDER,
        Destinations=[RECIPIENT],
        RawMessage={
            'Data': msg.as_string(),
        },
    )
except Exception as e:
    print(f"Error: {e}")
else:
    print(f"Email sent! Message ID: {response['MessageId']}")








[
  {
    "actions": {
      "elements": [
        "redshift:AuthorizeSnapshotAccess",
        "redshift:DeleteClusterSnapshot",
        "redshift:RevokeSnapshotAccess"
      ],
      "isExceptionList": false
    },
    "effect": "Allow",
    "id": "#1",
    "principals": null,
    "resources": {
      "elements": [
        "arn:aws:redshift:*:*:snapshot:*wiz-autogen-*"
      ],
      "isExceptionList": false
    }
  },
  {
    "actions": {
      "elements": [
        "redshift:CopyClusterSnapshot"
      ],
      "isExceptionList": false
    },
    "effect": "Allow",
    "id": "#2",
    "principals": null,
    "resources": {
      "elements": [
        "*"
      ],
      "isExceptionList": false
    }
  },
  {
    "actions": {
      "elements": [
        "redshift:CreateTags"
      ],
      "isExceptionList": false
    },
    "effect": "Allow",
    "id": "#3",
    "principals": null,
    "resources": {
      "elements": [
        "arn:aws:redshift:*:*:snapshot:*/*"
      ],
      "isExceptionList": false
    }
  },
  {
    "actions": {
      "elements": [
        "redshift:DescribeClusterSnapshots",
        "redshift:DescribeClusters"
      ],
      "isExceptionList": false
    },
    "effect": "Allow",
    "id": "#4",
    "principals": null,
    "resources": {
      "elements": [
        "*"
      ],
      "isExceptionList": false
    }
  },
  {
    "actions": {
      "elements": [
        "redshift:CreateClusterSnapshot"
      ],
      "isExceptionList": false
    },
    "awsCondition": {
      "StringEquals": {
        "aws:RequestTag/wiz": "auto-gen-snapshot"
      }
    },
    "effect": "Allow",
    "id": "#5",
    "principals": null,
    "resources": {
      "elements": [
        "*"
      ],
      "isExceptionList": false
    }
  },
  {
    "actions": {
      "elements": [
        "rds:AddTagsToResource",
        "rds:DescribeDBClusterSnapshots",
        "rds:DescribeDBClusters",
        "rds:DescribeDBInstances",
        "rds:DescribeDBSnapshots",
        "rds:DescribeDBSubnetGroups",
        "rds:ListTagsForResource"
      ],
      "isExceptionList": false
    },
    "effect": "Allow",
    "id": "#6",
    "principals": null,
    "resources": {
      "elements": [
        "*"
      ],
      "isExceptionList": false
    }
  },
  {
    "actions": {
      "elements": [
        "rds:DeleteDBClusterSnapshot",
        "rds:ModifyDBClusterSnapshotAttribute"
      ],
      "isExceptionList": false
    },
    "effect": "Allow",
    "id": "#7",
    "principals": null,
    "resources": {
      "elements": [
        "arn:aws:rds:*:*:cluster-snapshot:wiz-autogen-*"
      ],
      "isExceptionList": false
    }
  },
  {
    "actions": {
      "elements": [
        "rds:CopyDBClusterSnapshot",
        "rds:CopyDBSnapshot"
      ],
      "isExceptionList": false
    },
    "effect": "Allow",
    "id": "#8",
    "principals": null,
    "resources": {
      "elements": [
        "*"
      ],
      "isExceptionList": false
    }
  },
  {
    "actions": {
      "elements": [
        "rds:DeleteDBSnapshot",
        "rds:ModifyDBSnapshotAttribute"
      ],
      "isExceptionList": false
    },
    "effect": "Allow",
    "id": "#9",
    "principals": null,
    "resources": {
      "elements": [
        "arn:aws:rds:*:*:snapshot:wiz-autogen-*"
      ],
      "isExceptionList": false
    }
  },
  {
    "actions": {
      "elements": [
        "rds:CreateDBClusterSnapshot",
        "rds:CreateDBSnapshot"
      ],
      "isExceptionList": false
    },
    "awsCondition": {
      "StringEquals": {
        "rds:req-tag/wiz": "auto-gen-snapshot"
      }
    },
    "effect": "Allow",
    "id": "#10",
    "principals": null,
    "resources": {
      "elements": [
        "*"
      ],
      "isExceptionList": false
    }
  },
  {
    "actions": {
      "elements": [
        "s3:GetObject",
        "s3:ListBucket",
        "s3express:CreateSession"
      ],
      "isExceptionList": false
    },
    "effect": "Allow",
    "id": "#11",
    "principals": null,
    "resources": {
      "elements": [
        "*"
      ],
      "isExceptionList": false
    }
  },
  {
    "actions": {
      "elements": [
        "kms:CreateGrant",
        "kms:ReEncrypt*"
      ],
      "isExceptionList": false
    },
    "awsCondition": {
      "StringLike": {
        "kms:ViaService": "rds.*.amazonaws.com"
      }
    },
    "effect": "Allow",
    "id": "#12",
    "principals": null,
    "resources": {
      "elements": [
        "*"
      ],
      "isExceptionList": false
    }
  },
  {
    "actions": {
      "elements": [
        "dynamodb:DescribeTable",
        "dynamodb:Scan"
      ],
      "isExceptionList": false
    },
    "effect": "Allow",
    "id": "#13",
    "principals": null,
    "resources": {
      "elements": [
        "*"
      ],
      "isExceptionList": false
    }
  }
]

Certainly! Below is a detailed explanation of each test case, including steps on how to test them in the context of a Data Security Posture Management (DSPM) solution like Wiz.io.

### 1. **Data Discovery and Classification**

- **Test Case 1: Discover All Data Repositories**
  - **Objective:** Verify that Wiz.io can automatically discover all data repositories across your environment.
  - **How to Test:**
    1. Connect Wiz.io to your cloud and on-prem environments.
    2. Ensure that the tool has access to the necessary API permissions to scan the environment.
    3. Trigger a data discovery scan.
    4. Review the list of discovered repositories (databases, cloud storage, etc.).
    5. Compare the list with an inventory you already maintain to check for completeness.
    6. Confirm that all known repositories are discovered and listed in the tool.

- **Test Case 2: Data Classification by Sensitivity**
  - **Objective:** Test Wiz.io's ability to classify discovered data by sensitivity.
  - **How to Test:**
    1. After discovery, inspect the classified data in Wiz.io.
    2. Validate that sensitive data types (e.g., PII, PHI, PCI) are correctly identified and labeled.
    3. Cross-check a sample of the classified data against known records to ensure accuracy.
    4. Test by injecting synthetic sensitive data (e.g., dummy credit card numbers) into a repository and ensure that Wiz.io identifies and classifies it correctly.

- **Test Case 3: Identification of Unstructured Data**
  - **Objective:** Validate that Wiz.io correctly identifies and classifies unstructured data in cloud storage systems.
  - **How to Test:**
    1. Place various types of unstructured data (e.g., PDFs, CSVs, images) in cloud storage buckets.
    2. Run a classification scan in Wiz.io.
    3. Verify that the tool correctly identifies and classifies unstructured data according to content and sensitivity.

### 2. **Risk and Vulnerability Identification**

- **Test Case 4: Identify Misconfigured Security Settings**
  - **Objective:** Ensure Wiz.io identifies data repositories with weak or misconfigured security settings.
  - **How to Test:**
    1. Intentionally misconfigure a cloud storage bucket (e.g., set it to public).
    2. Run a security posture scan in Wiz.io.
    3. Verify that the tool flags the misconfigured repository and details the specific risk.

- **Test Case 5: Detect Vulnerabilities in Access Controls**
  - **Objective:** Test Wiz.io’s ability to detect vulnerabilities in data access control mechanisms.
  - **How to Test:**
    1. Assign overly permissive IAM roles or access policies to a data repository.
    2. Perform a security scan.
    3. Review Wiz.io’s findings to ensure that it identifies and reports excessive privileges.

- **Test Case 6: Sensitive Data Exposure in Non-Production Environments**
  - **Objective:** Verify detection of sensitive data exposure in non-production environments.
  - **How to Test:**
    1. Place sensitive data (e.g., PII) in a non-production environment (e.g., a development database).
    2. Configure Wiz.io to scan all environments, including non-production.
    3. Confirm that the tool flags the presence of sensitive data in the non-production environment.

### 3. **Compliance and Policy Enforcement**

- **Test Case 7: Compliance Mapping**
  - **Objective:** Check that Wiz.io can map discovered data to relevant compliance frameworks.
  - **How to Test:**
    1. Enable compliance frameworks relevant to your organization (e.g., GDPR, HIPAA) in Wiz.io.
    2. Review the mapping of discovered data to these frameworks.
    3. Ensure that sensitive data is correctly mapped and that compliance gaps are identified.

- **Test Case 8: Policy Enforcement**
  - **Objective:** Test Wiz.io’s ability to enforce data security policies.
  - **How to Test:**
    1. Create a security policy in Wiz.io (e.g., restrict public access to PII).
    2. Apply this policy across your environment.
    3. Intentionally violate the policy by making PII data public.
    4. Verify that Wiz.io detects the violation and alerts or enforces remediation actions.

- **Test Case 9: Compliance Reporting**
  - **Objective:** Ensure that Wiz.io can generate compliance reports and audit logs.
  - **How to Test:**
    1. After running compliance scans, generate a compliance report in Wiz.io.
    2. Review the report for completeness, accuracy, and alignment with regulatory requirements.
    3. Test audit log functionality by checking the records of scans, changes, and enforcement actions.

### 4. **Real-Time Monitoring and Alerting**

- **Test Case 10: Real-Time Monitoring**
  - **Objective:** Validate that Wiz.io provides real-time monitoring of data access.
  - **How to Test:**
    1. Enable real-time monitoring features in Wiz.io.
    2. Perform typical and atypical data access actions (e.g., access sensitive data from a new IP address).
    3. Confirm that Wiz.io logs these activities in real-time and flags any suspicious behavior.

- **Test Case 11: SIEM Integration**
  - **Objective:** Test integration with SIEM or SOC platforms.
  - **How to Test:**
    1. Configure Wiz.io to send alerts to your SIEM system.
    2. Trigger various data security incidents.
    3. Confirm that alerts are received and correctly categorized in the SIEM.

- **Test Case 12: Alert Prioritization**
  - **Objective:** Verify that Wiz.io prioritizes incidents based on risk levels.
  - **How to Test:**
    1. Generate different types of alerts (e.g., low, medium, and high risk).
    2. Review how Wiz.io categorizes and prioritizes these alerts.
    3. Ensure that high-risk incidents are escalated appropriately.

### 5. **Data Masking and Encryption**

- **Test Case 13: Identify Unencrypted Data**
  - **Objective:** Ensure Wiz.io can identify unencrypted sensitive data.
  - **How to Test:**
    1. Store sensitive data in an unencrypted state within a database or storage system.
    2. Run a scan in Wiz.io.
    3. Verify that the tool identifies and flags the unencrypted data.

- **Test Case 14: Automatic Data Masking/Encryption**
  - **Objective:** Test the ability to apply data masking or encryption.
  - **How to Test:**
    1. Configure Wiz.io to apply masking/encryption to sensitive data.
    2. Perform a scan and trigger the masking/encryption feature.
    3. Verify that the sensitive data is appropriately masked/encrypted and access controls are applied.

- **Test Case 15: Encryption Status Reporting**
  - **Objective:** Validate that Wiz.io can report on encryption status across repositories.
  - **How to Test:**
    1. Enable encryption on some data repositories while leaving others unencrypted.
    2. Run a scan to check the encryption status.
    3. Review the results in Wiz.io to ensure accurate reporting on which data is encrypted and the strength of encryption.

### 6. **Access Control and User Behavior Analytics**

- **Test Case 16: Analyze Access Control Policies**
  - **Objective:** Test Wiz.io’s capability to analyze access control policies.
  - **How to Test:**
    1. Set up access control policies in your environment.
    2. Run a scan in Wiz.io to analyze these policies.
    3. Check the findings for any accounts with unnecessary or excessive privileges and compare with known baselines.

- **Test Case 17: Detect Unusual Access Patterns**
  - **Objective:** Validate that Wiz.io detects unusual access patterns.
  - **How to Test:**
    1. Simulate unusual access patterns (e.g., accessing data from unusual locations or by unusual accounts).
    2. Review Wiz.io’s monitoring logs and alerts.
    3. Confirm that the tool detects and alerts on these patterns.

- **Test Case 18: Integration with IAM Systems**
  - **Objective:** Ensure Wiz.io can integrate with IAM systems for enforcing least privilege.
  - **How to Test:**
    1. Connect Wiz.io to your IAM system.
    2. Analyze user roles and privileges in Wiz.io.
    3. Check if the tool can suggest and enforce adjustments to user roles based on the principle of least privilege.

### 7. **Incident Response and Remediation**

- **Test Case 19: Automated Incident Response**
  - **Objective:** Validate Wiz.io’s ability to generate automated incident response workflows.
  - **How to Test:**
    1. Trigger a data security incident (e.g., unauthorized data access).
    2. Review Wiz.io’s automated incident response.
    3. Check if it correctly suggests or performs actions like revoking access, isolating data, or notifying stakeholders.

- **Test Case 20: Effectiveness of Remediation Suggestions**
  - **Objective:** Test the effectiveness of remediation suggestions.
  - **How to Test:**
    1. Generate various types of security alerts.
    2. Review Wiz.io’s remediation suggestions.
    3. Implement the suggestions and assess their effectiveness in mitigating risks.

### 8. **Data Governance and Auditing**

- **Test Case 21: Data Inventory Management**
  - **Objective:** Test Wiz.io’s capability to maintain a data inventory with detailed metadata.
  - **How to Test:**
   







# Re-importing the necessary modules and re-creating the Word document due to environment reset.
from docx import Document

# Create a new Document
doc = Document()
doc.add_heading('Wiz.io DSPM Proof of Concept (PoC) Test Cases', 0)

# Introduction Section
doc.add_paragraph("This document outlines the test cases for evaluating the capabilities of the Wiz.io Data Security Posture Management (DSPM) tool as part of a Proof of Concept (PoC). These test cases are designed to thoroughly assess Wiz.io's functionalities across various aspects of data security, compliance, and management.")

# Test Case 5: Data Masking and Encryption
doc.add_heading('5. Data Masking and Encryption', level=1)

doc.add_heading('Test Case 14: Automatic Data Masking/Encryption', level=2)
doc.add_paragraph("Objective: Verify that Wiz.io can automatically apply data masking or encryption policies.")
doc.add_paragraph("Steps to Test:")
doc.add_paragraph("1. Setup: Identify a dataset containing sensitive information and configure masking or encryption policies within Wiz.io.", style='List Number')
doc.add_paragraph("2. Execution: Run the masking or encryption process.", style='List Number')
doc.add_paragraph("3. Verification: Verify that the sensitive data is masked or encrypted as per the policy.", style='List Number')
doc.add_paragraph("4. Outcome: Ensure that the masking or encryption is applied consistently and that only authorized users can access the original data, with logs capturing these events.", style='List Number')

doc.add_heading('Test Case 15: Encryption Status Reporting', level=2)
doc.add_paragraph("Objective: Validate that Wiz.io can generate reports on the encryption status of data across repositories.")
doc.add_paragraph("Steps to Test:")
doc.add_paragraph("1. Setup: Ensure that some data repositories are encrypted while others are left unencrypted.", style='List Number')
doc.add_paragraph("2. Execution: Run a security posture scan focused on encryption.", style='List Number')
doc.add_paragraph("3. Verification: Review the report generated by Wiz.io to ensure it accurately reflects the encryption status of each repository.", style='List Number')
doc.add_paragraph("4. Outcome: The tool should accurately report which data is encrypted and should provide information about the encryption standards used (e.g., AES-256) and the location of encryption keys.", style='List Number')

# Test Case 6: Access Control and User Behavior Analytics
doc.add_heading('6. Access Control and User Behavior Analytics', level=1)

doc.add_heading('Test Case 16: Analyze Access Control Policies', level=2)
doc.add_paragraph("Objective: Test Wiz.io’s ability to analyze and optimize access control policies.")
doc.add_paragraph("Steps to Test:")
doc.add_paragraph("1. Setup: Set up a range of access control policies in your environment, including those with different levels of granularity (e.g., role-based access controls).", style='List Number')
doc.add_paragraph("2. Execution: Run a scan in Wiz.io to analyze these policies.", style='List Number')
doc.add_paragraph("3. Verification: Review Wiz.io’s findings to identify accounts with excessive privileges or policies that are overly permissive.", style='List Number')
doc.add_paragraph("4. Outcome: Ensure that the tool provides actionable insights, such as recommendations to tighten access controls and enforce the principle of least privilege.", style='List Number')

doc.add_heading('Test Case 17: Detect Unusual Access Patterns', level=2)
doc.add_paragraph("Objective: Validate that Wiz.io can detect and alert on unusual access patterns.")
doc.add_paragraph("Steps to Test:")
doc.add_paragraph("1. Setup: Simulate unusual access patterns, such as accessing data from an unusual location, using credentials at odd hours, or accessing large volumes of sensitive data.", style='List Number')
doc.add_paragraph("2. Execution: Monitor how Wiz.io logs these activities and check if it flags them as suspicious.", style='List Number')
doc.add_paragraph("3. Verification: Review the alerts and logs to ensure that the tool accurately detects these anomalies and classifies them by risk level.", style='List Number')
doc.add_paragraph("4. Outcome: Confirm that Wiz.io correctly identifies and alerts on unusual access patterns, helping to mitigate potential insider threats or external attacks.", style='List Number')

doc.add_heading('Test Case 18: Integration with IAM Systems', level=2)
doc.add_paragraph("Objective: Ensure Wiz.io integrates smoothly with Identity and Access Management (IAM) systems for enforcing least privilege.")
doc.add_paragraph("Steps to Test:")
doc.add_paragraph("1. Setup: Integrate Wiz.io with your IAM solution (e.g., AWS IAM, Azure Active Directory).", style='List Number')
doc.add_paragraph("2. Execution: Analyze user roles and access privileges within Wiz.io.", style='List Number')
doc.add_paragraph("3. Verification: Check if Wiz.io can suggest or automatically enforce role adjustments to ensure users have the least amount of privilege necessary to perform their roles.", style='List Number')
doc.add_paragraph("4. Outcome: Validate that the integration allows for efficient management of user privileges, reducing the risk of privilege escalation or misuse.", style='List Number')

# Test Case 7: Incident Response and Remediation
doc.add_heading('7. Incident Response and Remediation', level=1)

doc.add_heading('Test Case 19: Automated Incident Response', level=2)
doc.add_paragraph("Objective: Validate Wiz.io’s capability to trigger automated incident response workflows.")
doc.add_paragraph("Steps to Test:")
doc.add_paragraph("1. Setup: Define a set of automated incident response actions within Wiz.io (e.g., revoking access, notifying stakeholders).", style='List Number')
doc.add_paragraph("2. Execution: Simulate a data security incident (e.g., unauthorized access to sensitive data).", style='List Number')
doc.add_paragraph("3. Verification: Monitor how Wiz.io responds to the incident. Check if it correctly triggers the pre-defined workflows, such as isolating the affected data repository or alerting the incident response team.", style='List Number')
doc.add_paragraph("4. Outcome: Ensure that the automated response is timely and effective in mitigating the risk and preventing further damage.", style='List Number')

doc.add_heading('Test Case 20: Effectiveness of Remediation Suggestions', level=2)
doc.add_paragraph("Objective: Test the effectiveness and applicability of Wiz.io’s remediation suggestions.")
doc.add_paragraph("Steps to Test:")
doc.add_paragraph("1. Setup: Trigger various security incidents, such as data breaches or policy violations.", style='List Number')
doc.add_paragraph("2. Execution: Review the remediation suggestions provided by Wiz.io for each incident.", style='List Number')
doc.add_paragraph("3. Verification: Implement the suggested remediation actions and evaluate their effectiveness in mitigating the identified risks.", style='List Number')
doc.add_paragraph("4. Outcome: Ensure that the remediation suggestions are practical, relevant, and effectively reduce the security risk when applied.", style='List Number')

# Test Case 8: Data Governance and Auditing
doc.add_heading('8. Data Governance and Auditing', level=1)

doc.add_heading('Test Case 21: Data Inventory Management', level=2)
doc.add_paragraph("Objective: Test Wiz.io’s ability to maintain a comprehensive data inventory with detailed metadata.")
doc.add_paragraph("Steps to Test:")
doc.add_paragraph("1. Setup: Perform a full data inventory scan across all connected environments using Wiz.io.", style='List Number')
doc.add_paragraph("2. Execution: Review the generated inventory, ensuring it includes details such as data type, sensitivity, location, access controls, and encryption status.", style='List Number')
doc.add_paragraph("3. Verification: Compare the inventory against your organization’s known data assets to ensure completeness and accuracy.", style='List Number')
doc.add_paragraph("4. Outcome: Confirm that Wiz.io maintains a detailed and accurate data inventory, providing a foundation for effective data governance.", style='List Number')

doc.add_heading('Test Case 22: Audit Trail Generation', level=2)
doc.add_paragraph("Objective: Ensure Wiz.io can generate detailed audit trails for data access, changes, and incidents.")
doc.add_paragraph("Steps to Test:")
doc.add_paragraph("1. Setup: Enable audit trail logging in Wiz.io and define what events should be logged (e.g., data access, configuration changes).", style='List Number')
doc.add_paragraph("2. Execution: Perform various activities that should generate logs, such as accessing sensitive data, making changes to security settings, or responding to an incident.", style='List Number')
doc.add_paragraph("3. Verification: Review the audit trails generated by Wiz.io, checking for completeness and accuracy.", style='List Number')
doc.add_paragraph("4. Outcome: Ensure that the audit trails provide a clear and detailed record of events, suitable for use in audits or investigations.", style='List Number')

doc.add_heading('Test Case 23: Policy Compliance Auditing', level=2)
doc.add_paragraph("Objective: Test Wiz.io’s ability to audit compliance with internal data security policies.")
doc.add_paragraph("Steps to Test:")
doc.add_paragraph("1. Setup: Define internal data security policies within Wiz.io (e.g., all sensitive data must be encrypted, access must be logged).", style='List Number')
doc.add_paragraph("2. Execution: Perform regular scans and audits to check compliance with these policies.", style='List Number')
doc.add_paragraph("3. Verification: Review the compliance audit results, ensuring they accurately reflect adherence to the policies.", style='List Number')
