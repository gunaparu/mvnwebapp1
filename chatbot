aws lexv2-models update-bot --bot-id <Your-Bot-ID> \
--role-arn arn:aws:iam::<your-account-id>:role/LexBotRole \
--fulfillment-code-hook-lambda arn:aws:lambda:<your-region>:<your-account-id>:function:LexKnowledgeHandler



Yes! You can integrate your chatbot with Slack using Amazon Lex and AWS Lambda. Here‚Äôs how:

High-Level Flow
	1.	User sends a message in Slack.
	2.	Slack forwards the message to an API Gateway endpoint.
	3.	API Gateway triggers AWS Lambda, which calls Amazon Lex.
	4.	Lex processes the message and returns a response.
	5.	Lambda sends the response back to Slack.

Step-by-Step Implementation

Step 1: Create a Slack App
	1.	Go to Slack API Console and click Create New App.
	2.	Choose ‚ÄúFrom scratch‚Äù and enter an app name (e.g., AWSLexChatbot).
	3.	Select the Slack workspace where you want to integrate the bot.
	4.	In the ‚ÄúOAuth & Permissions‚Äù tab, under ‚ÄúScopes,‚Äù add:
	‚Ä¢	Bot Token Scopes:
	‚Ä¢	chat:write (send messages)
	‚Ä¢	chat:write.public (send messages to public channels)
	‚Ä¢	app_mentions:read (listen for @mentions)
	‚Ä¢	commands (respond to Slack commands)
	5.	Install the app and get the Bot Token.

Step 2: Create an API Gateway
	1.	Go to Amazon API Gateway in AWS Console.
	2.	Create a new REST API.
	3.	Create a POST method under the root resource (/).
	4.	Set the integration type to AWS Lambda and choose your Lambda function.
	5.	Deploy the API and get the API Gateway URL.

Step 3: Create AWS Lambda Function

This function will process Slack messages and interact with Lex.

Lambda Function (Python)

import json
import boto3
import requests

SLACK_BOT_TOKEN = "xoxb-your-slack-bot-token"
LEX_BOT_ID = "your-lex-bot-id"
LEX_BOT_ALIAS_ID = "your-lex-bot-alias-id"
LEX_REGION = "us-east-1"

slack_headers = {
    "Content-Type": "application/json",
    "Authorization": f"Bearer {SLACK_BOT_TOKEN}"
}

lex_client = boto3.client("lexv2-runtime", region_name=LEX_REGION)

def send_message_to_slack(channel, text):
    url = "https://slack.com/api/chat.postMessage"
    payload = json.dumps({"channel": channel, "text": text})
    requests.post(url, headers=slack_headers, data=payload)

def lambda_handler(event, context):
    body = json.loads(event["body"])
    if "event" not in body:
        return {"statusCode": 400, "body": "Invalid request"}

    slack_event = body["event"]
    if "text" not in slack_event or "channel" not in slack_event:
        return {"statusCode": 400, "body": "Missing parameters"}

    user_input = slack_event["text"]
    channel_id = slack_event["channel"]

    lex_response = lex_client.recognize_text(
        botId=LEX_BOT_ID,
        botAliasId=LEX_BOT_ALIAS_ID,
        localeId="en_US",
        sessionId="slack-user",
        text=user_input
    )

    lex_message = lex_response.get("messages", [{}])[0].get("content", "Sorry, I didn't understand that.")

    send_message_to_slack(channel_id, lex_message)

    return {"statusCode": 200, "body": "Message processed"}

	‚Ä¢	Receives messages from Slack, sends them to Lex, and responds back.
	‚Ä¢	Replace your-lex-bot-id, your-lex-bot-alias-id, and xoxb-your-slack-bot-token.

Step 4: Configure Slack Events API
	1.	Go to your Slack App settings ‚Üí Event Subscriptions.
	2.	Enable Events API and enter your API Gateway URL.
	3.	Subscribe to the event:
	‚Ä¢	app_mention (to respond when the bot is mentioned)
	‚Ä¢	message.channels (to listen for messages in public channels)

Step 5: Test the Chatbot in Slack
	1.	Go to a Slack channel and type:

@AWSLexChatbot What is IAM?


	2.	The chatbot should respond with:

IAM roles grant temporary permissions to AWS resources.

Summary

AWS Service	Purpose
Amazon Lex	AI chatbot for processing user queries
AWS Lambda	Handles Slack messages and queries Lex
Amazon API Gateway	Exposes an endpoint for Slack integration
Slack API	Sends/receives messages from Slack

This setup enables a fully functional Slack chatbot using AWS services. Let me know if you need 

Yes, you can store the knowledge base in a TXT file in S3 and use it for the chatbot. However, searching text data in a TXT file is less structured than JSON, but it can still work using keyword matching or semantic search (using AI models like Amazon Bedrock or OpenAI API).

Steps to Use a TXT File as Knowledge Base

Step 1: Upload a TXT File to S3
	1.	Open Amazon S3 in AWS Console.
	2.	Create a bucket (e.g., chatbot-knowledge-base).
	3.	Upload a TXT file with knowledge base data.

Example knowledge_base.txt

IAM roles: IAM roles grant temporary permissions to AWS resources.
Disaster recovery: Disaster recovery in AWS involves backups, failover strategies, and resilience planning.
Security best practices: Use IAM least privilege, encrypt data, and enable logging.

Step 2: Create AWS Lambda Function

This function will read the TXT file from S3 and search for relevant answers.

Lambda Function (Python)

import boto3

S3_BUCKET = "chatbot-knowledge-base"
S3_FILE = "knowledge_base.txt"
s3_client = boto3.client("s3")

def get_data_from_s3():
    response = s3_client.get_object(Bucket=S3_BUCKET, Key=S3_FILE)
    content = response["Body"].read().decode("utf-8")
    return content

def search_answer(user_query, knowledge_text):
    lines = knowledge_text.split("\n")
    for line in lines:
        if ":" in line:
            key, value = line.split(":", 1)
            if key.lower() in user_query.lower():
                return value.strip()
    return "I couldn't find an answer. Please check the knowledge base."

def lambda_handler(event, context):
    user_query = event["inputTranscript"]  # Extract user query from Lex
    knowledge_text = get_data_from_s3()
    answer = search_answer(user_query, knowledge_text)
    
    return {
        "sessionState": {
            "dialogAction": {"type": "Close"},
            "intent": {"name": "GetKnowledge", "state": "Fulfilled"}
        },
        "messages": [{"contentType": "PlainText", "content": answer}]
    }

	‚Ä¢	This function:
	1.	Reads the TXT file from S3.
	2.	Splits the file line by line.
	3.	Searches for a keyword match in user queries.
	4.	Returns the corresponding answer.

Step 3: Create Amazon Lex Chatbot

Follow the same process as before:
	1.	Create a Lex bot (KnowledgeBot).
	2.	Add an Intent (GetKnowledge).
	3.	Define Sample Utterances like:

"What is IAM?"
"Tell me about disaster recovery."
"What are security best practices?"


	4.	Set Lambda function as the fulfillment method.
	5.	Deploy and test the chatbot.

Pros & Cons of Using TXT Instead of JSON

Factor	TXT Format	JSON Format
Simplicity	Easy to write and read	Structured but requires formatting
Search Performance	Basic keyword matching	Faster structured search
Flexibility	Good for plain text data	Better for hierarchical data
Scalability	Difficult for large data	Easier to scale

Alternative: Using AI for Smarter Search

If you want smarter search, you can:
	‚Ä¢	Use Amazon Bedrock (Claude, Titan) for AI-driven response generation.
	‚Ä¢	Use Amazon OpenSearch (or DynamoDB) for structured search.
	‚Ä¢	Integrate with OpenAI GPT API for natural language processing.

For now, if a simple keyword-based chatbot is enough, the TXT approach will work. Let me know if you want to improve the search!



import boto3
import json

# Initialize AWS Organizations client
client = boto3.client('organizations')

def list_scp_policies():
    """Retrieve all SCPs in the AWS Organization"""
    policies = []
    paginator = client.get_paginator('list_policies')
    for page in paginator.paginate(Filter='SERVICE_CONTROL_POLICY'):
        policies.extend(page['Policies'])
    return policies

def describe_scp(policy_id):
    """Fetch SCP details"""
    response = client.describe_policy(PolicyId=policy_id)
    return response['Policy']

def list_scp_targets(policy_id):
    """List OUs and Accounts where the SCP is applied"""
    targets = []
    paginator = client.get_paginator('list_targets_for_policy')
    for page in paginator.paginate(PolicyId=policy_id):
        targets.extend(page['Targets'])
    return targets

def list_accounts():
    """List all AWS accounts in the organization"""
    accounts = []
    paginator = client.get_paginator('list_accounts')
    for page in paginator.paginate():
        accounts.extend(page['Accounts'])
    return accounts

def analyze_scp_issues():
    """Perform SCP analysis"""
    scp_policies = list_scp_policies()
    accounts = list_accounts()
    account_ids = {acc['Id'] for acc in accounts}

    print(f"üîç Found {len(scp_policies)} SCPs in the AWS Organization...\n")

    for scp in scp_policies:
        policy_id = scp['Id']
        policy_name = scp['Name']
        policy_details = describe_scp(policy_id)
        policy_json = json.loads(policy_details['Content'])
        policy_statements = policy_json.get("Statement", [])

        print(f"‚û°Ô∏è Analyzing SCP: {policy_name} ({policy_id})")

        # Check if SCP is applied to any account or OU
        targets = list_scp_targets(policy_id)
        if not targets:
            print(f"‚ö†Ô∏è Warning: SCP '{policy_name}' is **not attached** to any account or OU!\n")

        # Check if SCP is applied to an empty OU
        for target in targets:
            if target['Type'] == 'ORGANIZATIONAL_UNIT':
                ou_id = target['TargetId']
                children = client.list_children(ParentId=ou_id, ChildType='ACCOUNT')['Children']
                if not children:
                    print(f"‚ö†Ô∏è Warning: SCP '{policy_name}' is attached to an **empty OU ({ou_id})**!\n")

        # Check for overly permissive policies
        for statement in policy_statements:
            if statement['Effect'] == "Allow":
                print(f"‚ö†Ô∏è Risk: SCP '{policy_name}' has an **Allow rule**, which may be unsafe.\n")

            if "*" in statement.get("Resource", ""):
                print(f"‚ö†Ô∏è Risk: SCP '{policy_name}' allows **all resources (`*`)**!\n")

            if "*" in statement.get("Action", ""):
                print(f"‚ö†Ô∏è Risk: SCP '{policy_name}' allows **all actions (`*`)**!\n")

        # Check for redundant denies
        deny_actions = set()
        for statement in policy_statements:
            if statement['Effect'] == "Deny":
                for action in statement.get("Action", []):
                    if action in deny_actions:
                        print(f"‚ö†Ô∏è Redundancy: SCP '{policy_name}' has duplicate deny rule for action: {action}\n")
                    deny_actions.add(action)

        print("‚úÖ SCP Analysis Completed.\n")

if __name__ == "__main__":
    analyze_scp_issues()


import boto3
import json

# Initialize AWS Organizations client
client = boto3.client('organizations')

def list_scp_policies():
    """Retrieve all SCPs in the AWS Organization"""
    policies = []
    paginator = client.get_paginator('list_policies')
    for page in paginator.paginate(Filter='SERVICE_CONTROL_POLICY'):
        policies.extend(page['Policies'])
    return policies

def describe_scp(policy_id):
    """Fetch SCP details"""
    response = client.describe_policy(PolicyId=policy_id)
    return response['Policy']

def list_scp_targets(policy_id):
    """List OUs and Accounts where the SCP is applied"""
    targets = []
    paginator = client.get_paginator('list_targets_for_policy')
    for page in paginator.paginate(PolicyId=policy_id):
        targets.extend(page['Targets'])
    return targets

def list_accounts():
    """List all AWS accounts in the organization"""
    accounts = []
    paginator = client.get_paginator('list_accounts')
    for page in paginator.paginate():
        accounts.extend(page['Accounts'])
    return accounts

def list_ous():
    """List all Organizational Units (OUs) in the AWS Organization"""
    ous = []
    paginator = client.get_paginator('list_organizational_units_for_parent')
    root_id = client.list_roots()['Roots'][0]['Id']
    for page in paginator.paginate(ParentId=root_id):
        ous.extend(page['OrganizationalUnits'])
    return ous

def list_children(ou_id):
    """List all accounts under a given OU"""
    children = []
    paginator = client.get_paginator('list_children')
    for page in paginator.paginate(ParentId=ou_id, ChildType='ACCOUNT'):
        children.extend(page['Children'])
    return children

def analyze_scp_issues():
    """Perform SCP analysis"""
    scp_policies = list_scp_policies()
    accounts = list_accounts()
    ous = list_ous()
    
    account_ids = {acc['Id']: acc['Name'] for acc in accounts}
    ou_ids = {ou['Id']: ou['Name'] for ou in ous}

    print(f"üîç Found {len(scp_policies)} SCPs in the AWS Organization...\n")

    # Track SCP attachments
    scp_account_map = {acc_id: [] for acc_id in account_ids}
    scp_ou_map = {ou_id: [] for ou_id in ou_ids}

    for scp in scp_policies:
        policy_id = scp['Id']
        policy_name = scp['Name']
        policy_details = describe_scp(policy_id)
        policy_json = json.loads(policy_details['Content'])
        policy_statements = policy_json.get("Statement", [])

        print(f"‚û°Ô∏è Analyzing SCP: {policy_name} ({policy_id})")

        # Get SCP targets
        targets = list_scp_targets(policy_id)
        if not targets:
            print(f"‚ö†Ô∏è Warning: SCP '{policy_name}' is **not attached** to any account or OU!\n")

        for target in targets:
            if target['Type'] == 'ACCOUNT':
                scp_account_map[target['TargetId']].append(policy_name)
            elif target['Type'] == 'ORGANIZATIONAL_UNIT':
                scp_ou_map[target['TargetId']].append(policy_name)
        
        # Check for overly permissive SCPs
        for statement in policy_statements:
            if statement['Effect'] == "Allow":
                print(f"‚ö†Ô∏è Risk: SCP '{policy_name}' has an **Allow rule**, which may be unsafe.\n")
            if "*" in statement.get("Resource", ""):
                print(f"‚ö†Ô∏è Risk: SCP '{policy_name}' allows **all resources (`*`)**!\n")
            if "*" in statement.get("Action", ""):
                print(f"‚ö†Ô∏è Risk: SCP '{policy_name}' allows **all actions (`*`)**!\n")

        # Check for redundant denies
        deny_actions = set()
        for statement in policy_statements:
            if statement['Effect'] == "Deny":
                for action in statement.get("Action", []):
                    if action in deny_actions:
                        print(f"‚ö†Ô∏è Redundancy: SCP '{policy_name}' has duplicate deny rule for action: {action}\n")
                    deny_actions.add(action)

        print("‚úÖ SCP Analysis Completed.\n")

    # Identify accounts missing SCPs at the OU level
    print("\nüîç Checking accounts with SCPs but not at the OU level...\n")
    for account_id, scp_list in scp_account_map.items():
        if scp_list:
            # Find if the account is inside an OU with SCPs
            for ou_id in ou_ids:
                if account_id in [child['Id'] for child in list_children(ou_id)]:
                    if not scp_ou_map[ou_id]:  # If OU has no SCP
                        print(f"‚ö†Ô∏è Account {account_ids[account_id]} ({account_id}) has SCPs attached but **its OU ({ou_ids[ou_id]}) has none**.\n")
                        break
            else:
                print(f"‚ö†Ô∏è Account {account_ids[account_id]} ({account_id}) has SCPs but is **not inside an OU with SCP enforcement**.\n")

    # Identify OUs without SCPs
    print("\nüîç Checking OUs without SCPs...\n")
    for ou_id, ou_name in ou_ids.items():
        if not scp_ou_map[ou_id]:
            print(f"‚ö†Ô∏è OU '{ou_name}' ({ou_id}) has **no SCPs attached**, which may be a security risk!\n")

if __name__ == "__main__":
    analyze_scp_issues()

















import boto3
import json

# Initialize AWS Organizations client
client = boto3.client('organizations')

def list_scp_policies():
    """Retrieve all SCPs in the AWS Organization"""
    policies = []
    paginator = client.get_paginator('list_policies')
    for page in paginator.paginate(Filter='SERVICE_CONTROL_POLICY'):
        policies.extend(page['Policies'])
    return policies

def describe_scp(policy_id):
    """Fetch SCP details"""
    response = client.describe_policy(PolicyId=policy_id)
    return response['Policy']

def list_scp_targets(policy_id):
    """List OUs and Accounts where the SCP is applied"""
    targets = []
    paginator = client.get_paginator('list_targets_for_policy')
    for page in paginator.paginate(PolicyId=policy_id):
        targets.extend(page['Targets'])
    return targets

def list_accounts():
    """List all AWS accounts in the organization"""
    accounts = []
    paginator = client.get_paginator('list_accounts')
    for page in paginator.paginate():
        accounts.extend(page['Accounts'])
    return accounts

def list_ous(parent_id=None):
    """Recursively list all Organizational Units (OUs) in AWS Organizations"""
    if parent_id is None:
        parent_id = client.list_roots()['Roots'][0]['Id']  # Get Root OU

    ous = []
    paginator = client.get_paginator('list_organizational_units_for_parent')
    
    for page in paginator.paginate(ParentId=parent_id):
        for ou in page['OrganizationalUnits']:
            ous.append(ou)
            ous.extend(list_ous(ou['Id']))  # Recursively fetch nested OUs

    return ous

def list_children(ou_id):
    """List all accounts under a given OU"""
    children = []
    paginator = client.get_paginator('list_children')
    for page in paginator.paginate(ParentId=ou_id, ChildType='ACCOUNT'):
        children.extend(page['Children'])
    return children

def analyze_scp_issues():
    """Perform SCP analysis"""
    scp_policies = list_scp_policies()
    accounts = list_accounts()
    ous = list_ous()
    
    account_ids = {acc['Id']: acc['Name'] for acc in accounts}
    ou_ids = {ou['Id']: ou['Name'] for ou in ous}

    print(f"üîç Found {len(scp_policies)} SCPs in the AWS Organization...\n")

    # Track SCP attachments
    scp_account_map = {acc_id: [] for acc_id in account_ids}
    scp_ou_map = {ou_id: [] for ou_id in ou_ids}

    for scp in scp_policies:
        policy_id = scp['Id']
        policy_name = scp['Name']
        policy_details = describe_scp(policy_id)
        policy_json = json.loads(policy_details['Content'])
        policy_statements = policy_json.get("Statement", [])

        print(f"‚û°Ô∏è Analyzing SCP: {policy_name} ({policy_id})")

        # Get SCP targets
        targets = list_scp_targets(policy_id)
        if not targets:
            print(f"‚ö†Ô∏è Warning: SCP '{policy_name}' is **not attached** to any account or OU!\n")

        for target in targets:
            if target['Type'] == 'ACCOUNT':
                scp_account_map[target['TargetId']].append(policy_name)
            elif target['Type'] == 'ORGANIZATIONAL_UNIT':
                ou_id = target['TargetId']
                if ou_id in scp_ou_map:  # Check if OU exists in dictionary
                    scp_ou_map[ou_id].append(policy_name)
                else:
                    print(f"‚ö†Ô∏è Warning: SCP '{policy_name}' is attached to an unknown OU ({ou_id}). Ensure all OUs are retrieved.\n")
        
        # Check for overly permissive SCPs
        for statement in policy_statements:
            if statement['Effect'] == "Allow":
                print(f"‚ö†Ô∏è Risk: SCP '{policy_name}' has an **Allow rule**, which may be unsafe.\n")
            if "*" in statement.get("Resource", ""):
                print(f"‚ö†Ô∏è Risk: SCP '{policy_name}' allows **all resources (`*`)**!\n")
            if "*" in statement.get("Action", ""):
                print(f"‚ö†Ô∏è Risk: SCP '{policy_name}' allows **all actions (`*`)**!\n")

        # Check for redundant denies
        deny_actions = set()
        for statement in policy_statements:
            if statement['Effect'] == "Deny":
                for action in statement.get("Action", []):
                    if action in deny_actions:
                        print(f"‚ö†Ô∏è Redundancy: SCP '{policy_name}' has duplicate deny rule for action: {action}\n")
                    deny_actions.add(action)

        print("‚úÖ SCP Analysis Completed.\n")

    # Identify accounts missing SCPs at the OU level
    print("\nüîç Checking accounts with SCPs but not at the OU level...\n")
    for account_id, scp_list in scp_account_map.items():
        if scp_list:
            # Find if the account is inside an OU with SCPs
            for ou_id in ou_ids:
                if account_id in [child['Id'] for child in list_children(ou_id)]:
                    if not scp_ou_map[ou_id]:  # If OU has no SCP
                        print(f"‚ö†Ô∏è Account {account_ids[account_id]} ({account_id}) has SCPs attached but **its OU ({ou_ids[ou_id]}) has none**.\n")
                        break
            else:
                print(f"‚ö†Ô∏è Account {account_ids[account_id]} ({account_id}) has SCPs but is **not inside an OU with SCP enforcement**.\n")

    # Identify OUs without SCPs
    print("\nüîç Checking OUs without SCPs...\n")
    for ou_id, ou_name in ou_ids.items():
        if not scp_ou_map[ou_id]:
            print(f"‚ö†Ô∏è OU '{ou_name}' ({ou_id}) has **no SCPs attached**, which may be a security risk!\n")

if __name__ == "__main__":
    analyze_scp_issues()


{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "AmazonEC2ContainerRegistryPowerUser",
            "Action": [
                "ecr:Describe*",
                "ecr:Get*",
                "ecr:List*",
                "ecr:PutImage",
                "ecr:DescribeImageScanFindings"
            ],
            "Effect": "Allow",
            "Resource": "*"
        },
        {
            "Action": [
                "support:*",
                "s3:List*",
                "s3:Get*",
                "secretsmanager:List*",
                "ec2:Describe*",
                "ecs:List*",
                "ecs:Get*",
                "ecs:Put*",
                "ecs:Describe*",
                "ecs:Register*",
                "elasticloadbalancing:Describe*",
                "elasticfilesystem:DescribeAccountPreferences",
                "lambda:List*",
                "lambda:Get*",
                "cloudwatch:DescribeInsightRules",
                "cloudwatch:GetMetricData",
                "cloudwatch:ListMetricStreams",
                "cloudwatch:DescribeAlarmsForMetric",
                "cloudwatch:ListDashboards",
                "cloudwatch:GetMetricStatistics",
                "cloudwatch:GetMetricWidgetImage",
                "cloudwatch:ListManagedInsightRules",
                "cloudwatch:ListMetrics",
                "cloudwatch:DescribeAnomalyDetectors",
                "cloudwatch:GetDashboard",
                "autoscaling:Describe*",
                "kms:List*",
                "tag:Get*",
                "states:List*",
                "states:Describe*",
                "ec2messages:Get*",
                "sqs:ListQueues",
                "sns:ListSMSSandboxPhoneNumbers",
                "sns:ListTopics",
                "sns:GetPlatformApplicationAttributes",
                "sns:GetSubscriptionAttributes",
                "sns:ListSubscriptions",
                "sns:CheckIfPhoneNumberIsOptedOut",
                "sns:ListOriginationNumbers",
                "sns:ListPhoneNumbersOptedOut",
                "sns:ListEndpointsByPlatformApplication",
                "sns:GetEndpointAttributes",
                "sns:GetSMSSandboxAccountStatus",
                "sns:GetSMSAttributes",
                "sns:ListPlatformApplications",
                "iam:List*",
                "iam:GenerateCredentialReport",
                "iam:Get*",
                "rds:Describe*",
                "rds:List*",
                "ec2:StartInstances",
                "ec2:StopInstances",
                "elasticmapreduce:Describe*",
                "elasticmapreduce:List*",
                "elasticmapreduce:ViewEventsFromAllClustersInConsole",
                "acm:Describe*",
                "acm:List*",
                "acm:Get*",
                "kafka:*",
                "datasync:list*",
                "datasync:describe*",
                "health:Describe*"
            ],
            "Effect": "Allow",
            "Resource": "*",
            "Sid": "UnRestrictedResourcesRead"
        },
        {
            "Action": [
                "apigateway:GET",
                "sns:ListTagsForResource",
                "sns:ListSubscriptionsByTopic",
                "sns:GetTopicAttributes",
                "sns:GetDataProtectionPolicy",
                "sqs:Get*",
                "sqs:ListDeadLetterSourceQueues",
                "sqs:ListMessageMoveTasks",
                "sqs:ListQueueTags",
                "sqs:ReceiveMessage",
                "cloudwatch:DescribeAlarmHistory",
                "cloudwatch:GetDashboard",
                "cloudwatch:ListTagsForResource",
                "cloudwatch:DescribeAlarms",
                "elasticfilesystem:DescribeBackupPolicy",
                "elasticfilesystem:DescribeMountTargets",
                "elasticfilesystem:DescribeTags",
                "elasticfilesystem:DescribeReplicationConfigurations",
                "elasticfilesystem:ListTagsForResource",
                "elasticfilesystem:DescribeLifecycleConfiguration",
                "elasticfilesystem:ClientMount",
                "elasticfilesystem:DescribeFileSystemPolicy",
                "elasticfilesystem:DescribeAccessPoints",
                "elasticfilesystem:DescribeFileSystems",
                "elasticfilesystem:DescribeMountTargetSecurityGroups",
                "execute-api:*",
                "kms:ReEncrypt*",
                "kms:List*",
                "kms:Get*",
                "kms:GenerateDataKey*",
                "kms:Encrypt",
                "kms:Describe*",
                "kms:Decrypt",
                "cloudtrail:LookupEvents",
                "cloudtrail:GetTrail",
                "cloudtrail:ListTrails",
                "cloudtrail:ListPublicKeys",
                "cloudtrail:ListTags",
                "cloudtrail:GetTrailStatus",
                "cloudtrail:GetEventSelectors",
                "cloudtrail:GetInsightSelectors",
                "cloudtrail:DescribeTrails",
                "aws-portal:ViewBilling",
                "logs:List*",
                "logs:Get*",
                "logs:Describe*",
                "logs:Start*",
                "logs:Stop*",
                "athena:List*",
                "athena:Get*",
                "batch:List*",
                "batch:Describe*",
                "glue:List*",
                "glue:Get*",
                "glue:Describe*",
                "events:List*",
                "events:Describe*",
                "events:Test*",
                "ses:List*",
                "ses:Get*"
            ],
            "Effect": "Allow",
            "Resource": [
                "arn:aws:apigateway:us-east-1::/apis/*",
                "arn:aws:sns:us-east-1:${account_id}:*",
                "arn:aws:sqs:us-east-1:${account_id}:*",
                "arn:aws:cloudwatch:us-east-1:${account_id}:*",
                "arn:aws:elasticfilesystem:us-east-1:${account_id}:*",
                "arn:aws:execute-api:us-east-1:${account_id}:*",
                "arn:aws:kms:us-east-1:${account_id}:*",
                "arn:aws:cloudtrail:us-east-1:${account_id}:*",
                "arn:aws:aws-portal:us-east-1:${account_id}:*",
                "arn:aws:logs:us-east-1:${account_id}:*",
                "arn:aws:athena:us-east-1:${account_id}:*",
                "arn:aws:batch:us-east-1:${account_id}:*",
                "arn:aws:glue:us-east-1:${account_id}:*",
                "arn:aws:events:us-east-1:${account_id}:*",
                "arn:aws:ses:us-east-1:${account_id}:*",
                "arn:aws:apigateway:us-west-2::/apis/*",
                "arn:aws:sns:us-west-2:${account_id}:*",
                "arn:aws:sqs:us-west-2:${account_id}:*",
                "arn:aws:cloudwatch:us-west-2:${account_id}:*",
                "arn:aws:elasticfilesystem:us-west-2:${account_id}:*",
                "arn:aws:execute-api:us-west-2:${account_id}:*",
                "arn:aws:kms:us-west-2:${account_id}:*",
                "arn:aws:cloudtrail:us-west-2:${account_id}:*",
                "arn:aws:aws-portal:us-west-2:${account_id}:*",
                "arn:aws:logs:us-west-2:${account_id}:*",
                "arn:aws:athena:us-west-2:${account_id}:*",
                "arn:aws:batch:us-west-2:${account_id}:*",
                "arn:aws:glue:us-west-2:${account_id}:*",
                "arn:aws:events:us-west-2:${account_id}:*",
                "arn:aws:ses:us-west-2:${account_id}:*"
            ]
        },
        {
        "Action":[
            "secretsmanager:Describe*",
            "secretsmanager:Put*",
            "secretsmanager:Get*",
            "secretsmanager:Update*",
            "secretsmanager:List*",
            "secretsmanager:Create*",
            "secretsmanager:Tag*"
            ],
        "Effect": "Allow",
        "Resource": "arn:aws:secretsmanager:us-east-1:${account_id}:*",
        "Condition" : {
            "StringEquals" : {
                "aws:ResourceTag/Project" : "TagtobeAdded"
            },
        "Sid": "SecretAccessOnly"
        }
        {
            "Action": [
                "ec2:AcceptTransitGatewayVpcAttachment",
                "ec2:AcceptVpc*",
                "ec2:AssociateRouteTable",
                "ec2:AssociateVpcCidrBlock",
                "ec2:AttachClassicLinkVpc",
                "ec2:AttachInternetGateway",
                "ec2:AttachNetworkInterface",
                "ec2:AuthorizeSecurityGroup*",
                "ec2:CreateDefaultSubnet",
                "ec2:CreateDefaultVpc",
                "ec2:CreateDhcpOptions",
                "ec2:CreateEgressOnlyInternetGateway",
                "ec2:CreateInternetGateway",
                "ec2:CreateNatGateway",
                "ec2:CreateNetworkAcl*",
                "ec2:CreateNetworkInterface",
                "ec2:CreateRoute*",
                "ec2:CreateSecurityGroup",
                "ec2:CreateSubnet",
                "ec2:CreateTransitGateway*",
                "ec2:CreateVpc*",
                "ec2:DeleteFlowLogs",
                "ec2:DeleteInternetGateway",
                "ec2:DeleteNatGateway",
                "ec2:DeleteNetworkAcl*",
                "ec2:DeletePlacementGroup",
                "ec2:DeleteRoute*",
                "ec2:DeleteSubnet",
                "ec2:DeleteTransitGateway*",
                "ec2:DeleteVpc*",
                "ec2:DeleteVpn*",
                "ec2:DetachClassicLinkVpc",
                "ec2:DetachInternetGateway",
                "ec2:DetachNetworkInterface",
                "ec2:DisableVpc*",
                "ec2:DisassociateRouteTable",
                "ec2:DisassociateSubnetCidrBlock",
                "ec2:EnableVpcClassicLink*",
                "ec2:ModifySubnetAttribute",
                "ec2:ModifyTransitGatewayVpcAttachment",
                "ec2:ModifyVpc*",
                "ec2:MoveAddressToVpc",
                "ec2:RejectTransitGatewayVpcAttachment",
                "ec2:RejectVpc*",
                "ec2:ReplaceNetworkAcl*",
                "ec2:ReplaceRoute",
                "ec2:ReplaceTransitGatewayRoute",
                "ec2:RevokeSecurityGroup*",
                "rds:Create*",
                "rds:Delete*",
                "elasticloadbalancing:Delete*",
                "elasticloadbalancing:Create*",
                "elasticloadbalancing:Deregister*",
                "elasticloadbalancing:Remove*",
                "elasticloadbalancing:Register*",
                "elasticloadbalancing:Enable*",
                "elasticloadbalancing:Set*",
                "elasticloadbalancing:Add*",
                "elasticloadbalancing:Attach*",
                "elasticloadbalancing:Disable*",
                "elasticloadbalancing:Modify*",
                "s3:CreateBucket",
                "s3:DeleteBucket"
            ],
            "Effect": "Deny",
            "Resource": "*",
            "Sid": "DenyVPCRDSS3Actions"
        },
        {
            "Action": [
                "apigateway:Delete*",
                "logs:Delete*",
                "elasticfilesystem:Delete*",
                "ecs:Delete*",
                "sns:Delete*",
                "sqs:Delete*",
                "apigateway:Create*",
                "elasticfilesystem:Create*",
                "sns:Create*",
                "sqs:Create*",
                "cloudwatch:Delete*",
                "events:DeleteRule",
                "kafka:Delete*",
                "kafka:Create*"
            ],
            "Effect": "Deny",
            "Resource": "*",
            "Sid": "DenyOtherDeleteActions"
        },
        {
            "Sid": "newBillingActions",
            "Effect": "Allow",
            "Action": [
                "billing:Get*",
                "account:Get*",
                "cur:Get*"
            ],
            "Resource": "*"
        }
    ]
}
