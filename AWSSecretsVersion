How does AWS Secrets Manager Versioning work?
AWS Secrets Manager Versioning is a powerful tool that allows you to manage multiple versions of your secrets. Each version is assigned a unique identifier, which can be used to retrieve the secret when needed. One of the key features of AWS Secrets Manager Versioning is the use of version stages. Version stages allow you to designate certain versions as 'current' or 'previous', making it easy to keep track of which version is being used in production and which version is being phased out.
Another important feature of AWS Secrets Manager Versioning is the use of version labels. Version labels are user-defined tags that can be used to provide additional context about each version. For example, you might use a version label to indicate which application or environment the secret is associated with. This makes it easier to manage your secrets and ensures that they are always used in the appropriate context.



What is AWS Secrets Manager Versioning?
AWS Secrets Manager Versioning is a feature that allows you to manage multiple versions of your secrets. When you update a secret, a new version is created, allowing you to track changes over time. Each version of the secret can be accessed independently, which makes it easy to revert to an earlier version if necessary.
To use AWS Secrets Manager Versioning, you simply create a new version of the secret whenever you make a change. You can also assign version stages and version labels to help you keep track of different versions. Version stages allow you to indicate whether a version is in development, testing, or production. Version labels are custom tags that you can use to identify specific versions based on their purpose or content.


Why is AWS Secrets Manager Versioning important?
AWS Secrets Manager Versioning is important because it provides improved security and compliance for organizations. By keeping track of changes made to secrets, versioning allows for easier auditing and helps ensure that only authorized users have access to sensitive information.
In addition, AWS Secrets Manager Versioning enables organizations to quickly recover from accidental or malicious changes to secrets. With the ability to restore a previous version of a secret, organizations can mitigate the impact of security incidents and minimize downtime.


Conclusion
In conclusion, AWS Secrets Manager Versioning is a powerful tool that allows organizations to better manage their secrets and improve security and compliance. By providing the ability to create and manage versions of secrets, as well as control access to those versions, AWS Secrets Manager Versioning helps organizations stay on top of their security needs.
Some best practices for using AWS Secrets Manager Versioning include properly controlling access to secrets, monitoring usage and access, and regularly rotating secrets. By following these best practices, organizations can ensure that their secrets are secure and that they remain compliant with relevant regulations and standards.



import boto3
from datetime import date
from botocore.exceptions import ClientError
import pandas as pd
import csv
def main():
    profiles = boto3.session.Session().available_profiles
    with open("testwrite"+'.csv','w') as f:
        #csv_writer = csv.writer(f) 
        f.write("Role Name"+","+"Policy Name"+","+"S3 Allow"+","+"S3 Deny"+","+"ec2_allow"+","+"ec2_deny"+","+"AccountNum\n")
        cols = ["Role Name","Policy Name","S3 Allow","S3 Deny","ec2_allow","ec2_deny","AccountNum"]
        df = pd.DataFrame(columns=cols)
        try:
            # switch to account profile
            session = boto3.Session(profile_name='EXPN-NA-DEV-SEC-OPS-DEV')
            client=session.client('iam',region_name="us-east-1")
            account_num = session.client('sts').get_caller_identity().get('Account')
            print("Switching to ", account_num)
            #response = client.list_roles()
            paginator = client.get_paginator("list_roles")
            for response in paginator.paginate(PaginationConfig={'MaxItems': 1000}):
            #print(response)
                for role in response['Roles']:
                    #print(role["RoleName"])
                    s3_perms_allow = ['s3:*','s3:CreateBucket']
                    ec2_perms_allow = ["ec2:*",'ec2:CreateInstance','ec2:StartInstance']
                    s3_perms_deny = ['s3:DeleteBucket']
                    ec2_perms_deny = ['ec2:StopInstance','ec2:AttachInternetGateway','ec2:DetachNetworkInterface','iam:Create*']
                    policy_name =[]
                    policy_list = []
                    s3_allow = []
                    s3_deny = []
                    ec2_allow = []
                    ec2_deny = []
                    role_name =role["RoleName"] 
                    #deny_permissions = ['s3:CreateBucket','S3:DeleteBucket','ec2:StopInstance']
                    listpolicy = client.list_role_policies(RoleName=role["RoleName"])
                    print("Role name:",role["RoleName"])
                    innoofpolicies = len(listpolicy['PolicyNames'])
                    for policies in listpolicy['PolicyNames']:
                        role_policy = client.get_role_policy(RoleName=role["RoleName"],PolicyName=policies)
                        policy_document = role_policy['PolicyDocument']
                        policy_name.append(policies)
                        for idx, statement in enumerate(policy_document.get('Statement', []), start=1):
                                #print(f"\nStatement {idx}:")
                            try:
                                effect = statement.get('Effect', 'N/A')
                                actions = statement.get('Action', 'N/A')
                                resources = statement.get('Resource', 'N/A')
                                conditions = statement.get('Condition', 'N/A')
                                if effect == 'Allow':
                                    for s3_perm_allow in s3_perms_allow:
                                        if s3_perm_allow in actions:
                                            print(f"\nStatement {idx}:")
                                            #print(role["RoleName"])
                                            print(f"Actions: {actions}")
                                            action = str(actions).replace(",","$")
                                            s3_allow.append(s3_perm_allow)
                                            print(s3_allow)
                                    for ec2_perm_allow in ec2_perms_allow:    
                                        if ec2_perm_allow in actions:
                                            print(f"\nStatement {idx}:")
                                            #print(role["RoleName"])
                                            print(f"Actions: {actions}")
                                            action = str(actions).replace(",","$")
                                            ec2_allow.append(ec2_perm_allow)
                                            resource = str(resources).replace(",","$")
                                            print(ec2_allow)
                                if effect == "Deny":
                                    for s3_perm_deny in s3_perms_deny:
                                        if s3_perm_deny in actions:
                                            print(f"\nStatement {idx}:")
                                            #print(role["RoleName"])
                                            print(f"Effect: {effect}")
                                            print(f"Actions: {actions}")
                                            action = str(actions).replace(",","$")
                                            s3_deny.append(s3_perm_deny)
                                            resource = str(resources).replace(",","$")
                                            print(s3_deny)
                                    for ec2_perm_deny in ec2_perms_deny:    
                                        if ec2_perm_deny in actions:
                                            print(f"\nStatement {idx}:")
                                            #print(role["RoleName"])
                                            print(f"Effect: {effect}")
                                            print(f"Actions: {actions}")
                                            action = str(actions).replace(",","$")
                                            ec2_deny.append(ec2_perm_deny)
                                            resource = str(resources).replace(",","$")
                                            print()
                                #print(role['RoleName'],"--->\t",s3_allow,ec2_allow,s3_deny,ec2_deny)  
                            except Exception as e1:
                                print(e1,role['RoleName'],"has an issue",policy_document)
                                pass
                    policies_list = str(policy_name).replace(",","$")
                    #liofpo = ', '.join(policy_name)
                    #print(role['RoleName'],"--->\t",policies_list, s3_allow,ec2_allow,s3_deny,ec2_deny)
                    #f.write(role['RoleName']+","+str(policies_list)+","+str(s3_allow)+","+str(s3_deny)+","+str(ec2_allow)+","+str(ec2_deny)+","+account_num+"\n")
                    #data = [[role_name,policies_list,s3_allow,s3_deny,ec2_allow,ec2_deny,account_num]]
                    #print(data)
                    #df = pd.DataFrame(data)
                    #df.to_csv("testwrite.csv", index=False)
                    response = client.list_attached_role_policies(RoleName=role['RoleName'])
                    #print(response)
                    attached_policies = response['AttachedPolicies']
                    #print(attached_policies)
                    policy_name1 = []
                    policy_list1 = []
                    s3_allow1 = []
                    s3_deny1 = []
                    ec2_allow1 = []
                    ec2_deny1 = []
                    cusnoofpolicies = len(attached_policies)
                    for policy in attached_policies:
                        #print(policy['PolicyName'])
                        #print(policy['PolicyArn'])
                        #role_policy = client.get_role_policy(RoleName=role_name,PolicyName=policy)
                        policy_document = client.get_policy(PolicyArn=policy['PolicyArn'])['Policy']['DefaultVersionId']
                        response = client.get_policy(PolicyArn=policy['PolicyArn'])
                        policy_version = client.get_policy_version(PolicyArn = policy['PolicyArn'], VersionId = response['Policy']['DefaultVersionId'] )
                        docum = policy_version['PolicyVersion']['Document']
                        policy_name1.append(policy['PolicyName'])
                        for idx, statement in enumerate(docum.get('Statement',[]),start=1):
                            #print(f"\nStatement {idx}:")
                            try:
                                effect = statement.get('Effect', 'N/A')
                                actions = statement.get('Action', 'N/A')
                                resources = statement.get('Resource', 'N/A')
                                conditions = statement.get('Condition', 'N/A')
                                if effect == 'Allow':
                                    for s3_perm_allow in s3_perms_allow:
                                        if s3_perm_allow in actions:
                                            print(f"\nStatement {idx}:")
                                            #print(role["RoleName"])
                                            print(f"Effect: {effect}")
                                            print(f"Actions: {actions}")
                                            action = str(actions).replace(",","$")
                                            s3_allow1.append(s3_perm_allow)
                                            print(s3_allow1)
                                    for ec2_perm_allow in ec2_perms_allow:    
                                        if ec2_perm_allow in actions:
                                            print(f"\nStatement {idx}:")
                                            #print(role["RoleName"])
                                            print(f"Effect: {effect}")
                                            print(f"Actions: {actions}")
                                            action = str(actions).replace(",","$")
                                            ec2_allow1.append(ec2_perm_allow)
                                            resource = str(resources).replace(",","$")
                                            print(ec2_allow1)
                                elif effect == 'Deny':
                                    for s3_perm_deny in s3_perms_deny:
                                        if s3_perm_deny in actions:
                                            print(f"\nStatement {idx}:")
                                            #print(role["RoleName"])
                                            print(f"Effect: {effect}")
                                            print(f"Actions: {actions}")
                                            action = str(actions).replace(",","$")
                                            s3_deny1.append(s3_perm_deny)
                                            resource = str(resources).replace(",","$")
                                            s3_deny1.append(s3_perm_deny)
                                            print(s3_deny1)
                                    for ec2_perm_deny in ec2_perms_deny:    
                                        if ec2_perm_deny in actions:
                                            print(f"\nStatement {idx}:")
                                            #print(role["RoleName"])
                                            print(f"Effect: {effect}")
                                            print(f"Actions: {actions}")
                                            action = str(actions).replace(",","$")
                                            ec2_deny1.append(ec2_perm_deny)
                                            resource = str(resources).replace(",","$")
                                            ec2_deny1.append(ec2_perm_deny)
                                            print(ec2_deny1)
                                #print(role['RoleName'],"--->\t",s3_allow1,ec2_allow1,s3_deny1,ec2_deny1)                      
                            except Exception as e1:
                                print(e1,role['RoleName'],"has an issue",policy_document)
                                pass 
                    policies_list1 = str(policy_name1).replace(",","$")
                    #liofpo1 = ', '.join(policy_name1)
                    #print(role['RoleName'],"--->\t",str(policies_list1),s3_allow1,ec2_allow1,s3_deny1,ec2_deny1)
                    #print(policy_list)
                    #f.write(role['RoleName']+","+str(policies_list1)+","+str(s3_allow1)+","+str(s3_deny1)+","+str(ec2_allow1)+","+str(ec2_deny1)+","+account_num+"\n")
                    #data1 = df[[role_name, str(policies_list1), str(s3_allow1), str(s3_deny1), str(ec2_allow1), str(ec2_deny1), account_num]]
                    #df = pd.DataFrame(data1)
                    #df.to_csv("testwrite.csv", index=False)
                    final_policies = policy_name + policy_name1
                    final_policies_list = str(final_policies).replace(",","$")
                    #print(final_policies)
                    final_s3_allow = s3_allow + s3_allow1
                    final_s3_allow_list = str(final_s3_allow).replace(",","$")
                    final_s3_deny = s3_deny + s3_deny1
                    final_s3_deny_list = str(final_s3_deny).replace(",","$")
                    final_ec2_allow = ec2_allow + ec2_allow1
                    final_ec2_allow_list = str(final_ec2_allow).replace(",","$")
                    final_ec2_deny = ec2_deny + ec2_deny1
                    final_ec2_deny_list = str(final_ec2_deny).replace(",","$")
                    f.write(role_name+","+str(final_policies_list)+","+str(set(final_s3_allow_list))+","+str(set(final_s3_deny_list))+","+str(set(final_ec2_allow_list))+","+str(set(final_ec2_deny_list))+","+account_num+"\n")
                    print(role_name,"---->", final_policies,final_s3_allow,final_s3_deny,final_ec2_allow,final_ec2_deny,account_num)
        except Exception as e:
            print("Error",e)
            pass
if __name__ == "__main__":
    main()
